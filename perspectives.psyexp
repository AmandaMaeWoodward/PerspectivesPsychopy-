<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.1.2">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1792, 1120]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="e1" valType="str" updates="None" name="expName"/>
    <Param val="on Save" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="myWindow = visual.Window(fullscr=True)&amp;#10;myBackground = visual.Polygon(win=myWindow, name=&quot;myBackground&quot;, edges=4, size=(5,5), pos=(0,0), fillColor=(1,1,1))&amp;#10;&amp;#10;&amp;#10;#importing necessary libraries&amp;#10;#from psychopy import visual&amp;#10;&amp;#10;#drawing the background of the study &amp;#10;#myBackground = ShapeStim(psychoJS.window, size=(5,5), pos=(0,0), fillColor=(1,1,1)) makes the background white&amp;#10;&amp;#10;&amp;#10;&amp;#10;finStimDir= 'finalStim/' #tells psychopy where to find images&amp;#10;&amp;#10;#starting positions for the ball&amp;#10;participantBallRightPos = (.05,-0.5)&amp;#10;participantBallLeftPos = (-.05, -0.5)&amp;#10;playerOneBallPos = (-.45, .50)&amp;#10;playerTwoBallPos = (.45, .50)&amp;#10;&amp;#10;#Setting up conditions&amp;#10;#Character set 1&amp;#10;AcharacterOne = &quot;CharacterA1.png&quot;&amp;#10;AcharacterTwo = &quot;CharacterA2.png&quot;&amp;#10;AcharacterThree = &quot;CharacterA3.png&quot;&amp;#10;Apuzzlecharacter =&quot;CharacterA1Puzzle.png&quot;&amp;#10;#Character set 2&amp;#10;BcharacterOne =&quot;CharacterB1.png&quot;&amp;#10;BcharacterTwo = &quot;CharacterB2.png&quot;&amp;#10;BcharacterThree = &quot;CharacterB3.png&quot;&amp;#10;Bpuzzlecharacter = &quot;CharacterB1Puzzle.png&quot;&amp;#10;#ball to use for games&amp;#10;ball = visual.ImageStim(myWindow, pos= participantBallRightPos, size=(.13,.13), image=finStimDir + 'ball.png')&amp;#10;&amp;#10;#using experimental ID to set up the condition&amp;#10;#setThrow options&amp;#10;throwResp = ['left', 'right']&amp;#10;&amp;#10;&amp;#10;expCond = expInfo['participant'][0]&amp;#10;if expCond == &quot;A&quot; or expCond == &quot;B&quot; or expCond == &quot;C&quot; or expCond == &quot;D&quot; or expCond == &quot;E&quot; or expCond == &quot;F&quot; or expCond == &quot;G&quot; or expCond == &quot;H&quot;:&amp;#10;    #first game participant&amp;#10;    Participant = AcharacterThree&amp;#10;    #first game left_side &amp;#10;    PlayerOne = AcharacterTwo&amp;#10;    PlayerOnePuzzle = Apuzzlecharacter&amp;#10;    #first game right_side&amp;#10;    PlayerTwo = AcharacterOne&amp;#10;    #second game participant&amp;#10;    ParticipantTwo =  BcharacterThree&amp;#10;    #second game left_side&amp;#10;    PlayerOneTwo = BcharacterTwo&amp;#10;    PlayeroneTwoPuzzle= Bpuzzlecharacter&amp;#10;    #second game right_side&amp;#10;    PlayerTwoTwo = BcharacterOne&amp;#10;&amp;#10;if expCond == &quot;I&quot; or expCond == &quot;J&quot; or expCond == &quot;K&quot; or expCond == &quot;L&quot; or expCond == &quot;M&quot; or expCond == &quot;N&quot; or expCond == &quot;O&quot; or expCond == &quot;P&quot;:&amp;#10;    #first game participant&amp;#10;    Participant = BcharacterThree&amp;#10;    #first game left_side &amp;#10;    PlayerOne = BcharacterTwo&amp;#10;    PlayerOnePuzzle = Bpuzzlecharacter&amp;#10;    #first game right_side&amp;#10;    PlayerTwo = BcharacterOne&amp;#10;    #second game participant&amp;#10;    ParticipantTwo =  AcharacterThree&amp;#10;    #second game left_side&amp;#10;    PlayerOneTwo = AcharacterTwo&amp;#10;    PlayeroneTwoPuzzle= Apuzzlecharacter&amp;#10;    #second game right_side&amp;#10;    PlayerTwoTwo = AcharacterOn&amp;#10;'''&amp;#10;ParticipantTwo = visual.ImageStim(myWindow, pos= (0, -.5),size= (.23,.45) ,image= finStimDir + AcharacterThree)&amp;#10;    PlayerOneTwo = visual.ImageStim(myWindow, pos= (-.5,.5),size= (.23,.45), image=finStimDir + AcharacterTwo)&amp;#10;    PlayerTwoTwo = visual.ImageStim(myWindow, pos= (.5,.5),size= (.23,.45), image=finStimDir + AcharacterOne)&amp;#10;    Participant = visual.ImageStim(myWindow, pos= (0, -.5),size= (.23,.45) ,image= finStimDir + BcharacterThree)&amp;#10;    PlayerOne = visual.ImageStim(myWindow, pos= (-.5,.5),size= (.23,.45), image=finStimDir + BcharacterTwo)&amp;#10;    PlayerTwo = visual.ImageStim(myWindow, pos= (.5,.5),size= (.23,.45), image=finStimDir + BcharacterOne)&amp;#10;'''&amp;#10;&amp;#10;#to make throws, left= 0, right=1&amp;#10;def CalcPoints(ballx, bally, futurex, futurey, step, receive):&amp;#10;    if receive =='right':&amp;#10;        rise= step/float(futurey)- bally&amp;#10;        run = step/float(futurex)- ballx&amp;#10;        points = [[ballx, bally]]&amp;#10;        for i in range(175):&amp;#10;            curPoint = [(points[i][0] + step), (points[i][1]+step+0.008)]&amp;#10;            points.append(curPoint)&amp;#10;        return points&amp;#10;    elif receive == 'left':&amp;#10;        rise= step/float(futurey)- bally&amp;#10;        run = step/float(futurex)- ballx&amp;#10;        points = [[ballx, bally]]&amp;#10;        for i in range(175):&amp;#10;            curPoint = [(points[i][0] - step), (points[i][1]+step+0.008)]&amp;#10;            points.append(curPoint)&amp;#10;        return points&amp;#10;    elif receive == 'one':&amp;#10;        rise= step/float(futurey)- bally&amp;#10;        run = step/float(futurex)- ballx&amp;#10;        points = [[ballx, bally]]&amp;#10;        for i in range(175):&amp;#10;            curPoint = [(points[i][0] + step), (points[i][1])]&amp;#10;            points.append(curPoint)&amp;#10;        return points&amp;#10;    elif receive == 'two':&amp;#10;        rise= step/float(futurey)- bally&amp;#10;        run = step/float(futurex)- ballx&amp;#10;        points = [[ballx, bally]]&amp;#10;        for i in range(175):&amp;#10;            curPoint = [(points[i][0] - step), (points[i][1])]&amp;#10;            points.append(curPoint)&amp;#10;        return points&amp;#10;    elif receive == 'pOne':&amp;#10;        rise= step/float(futurey)- bally&amp;#10;        run = step/float(futurex)- ballx&amp;#10;        points = [[ballx, bally]]&amp;#10;        for i in range(75):&amp;#10;            curPoint = [(points[i][0] + step), (points[i][1]-step-0.008)]&amp;#10;            points.append(curPoint)&amp;#10;        return points&amp;#10;    elif receive == 'pTwo':&amp;#10;        rise= step/float(futurey)- bally&amp;#10;        run = step/float(futurex)- ballx&amp;#10;        points = [[ballx, bally]]&amp;#10;        for i in range(175):&amp;#10;            curPoint = [(points[i][0] - step), (points[i][1]-step-0.008)]&amp;#10;            points.append(curPoint)&amp;#10;        return points&amp;#10;&amp;#10;part2Two = CalcPoints(participantBallRightPos[0],participantBallRightPos[1],playerTwoBallPos[0],playerTwoBallPos[1],0.005, 'right')&amp;#10;part2One = CalcPoints(participantBallLeftPos[0], participantBallLeftPos[1], playerOneBallPos[0], playerOneBallPos[1],0.005, 'left')&amp;#10;one2Two = CalcPoints(playerOneBallPos[0], playerOneBallPos[1],playerTwoBallPos[0],playerTwoBallPos[1],0.005, 'one')&amp;#10;two2One = CalcPoints(playerTwoBallPos[0], playerTwoBallPos[1],playerOneBallPos[0],playerOneBallPos[1],0.005, 'two')&amp;#10;one2Part = CalcPoints(playerOneBallPos[0], playerOneBallPos[1],participantBallRightPos[0],participantBallRightPos[1],0.005, 'pOne')&amp;#10;two2Part = CalcPoints(playerTwoBallPos[0], playerTwoBallPos[1],participantBallRightPos[0],participantBallRightPos[1],0.005, 'pTwo')&amp;#10;&amp;#10;#hopefully lets me end the game? &amp;#10;numThrow=0&amp;#10;&amp;#10;&amp;#10;#defining questionType&amp;#10;if expCond == &quot;A&quot; or expCond == &quot;I&quot; or expCond == &quot;E&quot; or expCond == &quot;M&quot;: &amp;#10;    questionType = 1&amp;#10;elif expCond == &quot;B&quot; or expCond == &quot;F&quot; or expCond == &quot;J&quot; or expCond == &quot;N&quot;: &amp;#10;    questionType = 2&amp;#10;elif expCond == &quot;C&quot; or expCond == &quot;G&quot; or expCond == &quot;K&quot; or expCond == &quot;O&quot;: &amp;#10;    questionType = 3&amp;#10;elif expCond == &quot;D&quot; or expCond == &quot;H&quot; or expCond == &quot;L&quot; or expCond == &quot;P&quot;: &amp;#10;    questionType = 4&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="myWindow = new visual.Window({&quot;fullscr&quot;: true});&amp;#10;myBackground = new visual.Polygon({&quot;win&quot;: myWindow, &quot;name&quot;: &quot;myBackground&quot;, &quot;edges&quot;: 4, &quot;size&quot;: [5, 5], &quot;pos&quot;: [0, 0], &quot;fillColor&quot;: [1, 1, 1]});&amp;#10;finStimDir = &quot;finalStim/&quot;;&amp;#10;participantBallRightPos = [0.05, (- 0.5)];&amp;#10;participantBallLeftPos = [(- 0.05), (- 0.5)];&amp;#10;playerOneBallPos = [(- 0.45), 0.5];&amp;#10;playerTwoBallPos = [0.45, 0.5];&amp;#10;AcharacterOne = &quot;CharacterA1.png&quot;;&amp;#10;AcharacterTwo = &quot;CharacterA2.png&quot;;&amp;#10;AcharacterThree = &quot;CharacterA3.png&quot;;&amp;#10;Apuzzlecharacter = &quot;CharacterA1Puzzle.png&quot;;&amp;#10;BcharacterOne = &quot;CharacterB1.png&quot;;&amp;#10;BcharacterTwo = &quot;CharacterB2.png&quot;;&amp;#10;BcharacterThree = &quot;CharacterB3.png&quot;;&amp;#10;Bpuzzlecharacter = &quot;CharacterB1Puzzle.png&quot;;&amp;#10;ball = new visual.ImageStim(myWindow, {&quot;pos&quot;: participantBallRightPos, &quot;size&quot;: [0.13, 0.13], &quot;image&quot;: (finStimDir + &quot;ball.png&quot;)});&amp;#10;throwResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;expCond = expInfo[&quot;participant&quot;][0];&amp;#10;if (((((((((expCond === &quot;A&quot;) || (expCond === &quot;B&quot;)) || (expCond === &quot;C&quot;)) || (expCond === &quot;D&quot;)) || (expCond === &quot;E&quot;)) || (expCond === &quot;F&quot;)) || (expCond === &quot;G&quot;)) || (expCond === &quot;H&quot;))) {&amp;#10;    Participant = AcharacterThree;&amp;#10;    PlayerOne = AcharacterTwo;&amp;#10;    PlayerOnePuzzle = Apuzzlecharacter;&amp;#10;    PlayerTwo = AcharacterOne;&amp;#10;    ParticipantTwo = BcharacterThree;&amp;#10;    PlayerOneTwo = BcharacterTwo;&amp;#10;    PlayeroneTwoPuzzle = Bpuzzlecharacter;&amp;#10;    PlayerTwoTwo = BcharacterOne;&amp;#10;}&amp;#10;if (((((((((expCond === &quot;I&quot;) || (expCond === &quot;J&quot;)) || (expCond === &quot;K&quot;)) || (expCond === &quot;L&quot;)) || (expCond === &quot;M&quot;)) || (expCond === &quot;N&quot;)) || (expCond === &quot;O&quot;)) || (expCond === &quot;P&quot;))) {&amp;#10;    Participant = BcharacterThree;&amp;#10;    PlayerOne = BcharacterTwo;&amp;#10;    PlayerOnePuzzle = Bpuzzlecharacter;&amp;#10;    PlayerTwo = BcharacterOne;&amp;#10;    ParticipantTwo = AcharacterThree;&amp;#10;    PlayerOneTwo = AcharacterTwo;&amp;#10;    PlayeroneTwoPuzzle = Apuzzlecharacter;&amp;#10;    PlayerTwoTwo = AcharacterOn;&amp;#10;}&amp;#10;/*&amp;#10;ParticipantTwo = visual.ImageStim(myWindow, pos= (0, -.5),size= (.23,.45) ,image= finStimDir + AcharacterThree)&amp;#10;PlayerOneTwo = visual.ImageStim(myWindow, pos= (-.5,.5),size= (.23,.45), image=finStimDir + AcharacterTwo)&amp;#10;PlayerTwoTwo = visual.ImageStim(myWindow, pos= (.5,.5),size= (.23,.45), image=finStimDir + AcharacterOne)&amp;#10;Participant = visual.ImageStim(myWindow, pos= (0, -.5),size= (.23,.45) ,image= finStimDir + BcharacterThree)&amp;#10;PlayerOne = visual.ImageStim(myWindow, pos= (-.5,.5),size= (.23,.45), image=finStimDir + BcharacterTwo)&amp;#10;PlayerTwo = visual.ImageStim(myWindow, pos= (.5,.5),size= (.23,.45), image=finStimDir + BcharacterOne)*/&amp;#10;function CalcPoints(ballx, bally, futurex, futurey, step, receive) {&amp;#10;    var curPoint, points, rise, run;&amp;#10;    if ((receive === &quot;right&quot;)) {&amp;#10;        rise = ((step / Number.parseFloat(futurey)) - bally);&amp;#10;        run = ((step / Number.parseFloat(futurex)) - ballx);&amp;#10;        points = [[ballx, bally]];&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(175), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            curPoint = [(points[i][0] + step), ((points[i][1] + step) + 0.008)];&amp;#10;            points.push(curPoint);&amp;#10;        }&amp;#10;        return points;&amp;#10;    } else {&amp;#10;        if ((receive === &quot;left&quot;)) {&amp;#10;            rise = ((step / Number.parseFloat(futurey)) - bally);&amp;#10;            run = ((step / Number.parseFloat(futurex)) - ballx);&amp;#10;            points = [[ballx, bally]];&amp;#10;            for (var i, _pj_c = 0, _pj_a = util.range(175), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                i = _pj_a[_pj_c];&amp;#10;                curPoint = [(points[i][0] - step), ((points[i][1] + step) + 0.008)];&amp;#10;                points.push(curPoint);&amp;#10;            }&amp;#10;            return points;&amp;#10;        } else {&amp;#10;            if ((receive === &quot;one&quot;)) {&amp;#10;                rise = ((step / Number.parseFloat(futurey)) - bally);&amp;#10;                run = ((step / Number.parseFloat(futurex)) - ballx);&amp;#10;                points = [[ballx, bally]];&amp;#10;                for (var i, _pj_c = 0, _pj_a = util.range(175), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    i = _pj_a[_pj_c];&amp;#10;                    curPoint = [(points[i][0] + step), points[i][1]];&amp;#10;                    points.push(curPoint);&amp;#10;                }&amp;#10;                return points;&amp;#10;            } else {&amp;#10;                if ((receive === &quot;two&quot;)) {&amp;#10;                    rise = ((step / Number.parseFloat(futurey)) - bally);&amp;#10;                    run = ((step / Number.parseFloat(futurex)) - ballx);&amp;#10;                    points = [[ballx, bally]];&amp;#10;                    for (var i, _pj_c = 0, _pj_a = util.range(175), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        i = _pj_a[_pj_c];&amp;#10;                        curPoint = [(points[i][0] - step), points[i][1]];&amp;#10;                        points.push(curPoint);&amp;#10;                    }&amp;#10;                    return points;&amp;#10;                } else {&amp;#10;                    if ((receive === &quot;pOne&quot;)) {&amp;#10;                        rise = ((step / Number.parseFloat(futurey)) - bally);&amp;#10;                        run = ((step / Number.parseFloat(futurex)) - ballx);&amp;#10;                        points = [[ballx, bally]];&amp;#10;                        for (var i, _pj_c = 0, _pj_a = util.range(75), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                            i = _pj_a[_pj_c];&amp;#10;                            curPoint = [(points[i][0] + step), ((points[i][1] - step) - 0.008)];&amp;#10;                            points.push(curPoint);&amp;#10;                        }&amp;#10;                        return points;&amp;#10;                    } else {&amp;#10;                        if ((receive === &quot;pTwo&quot;)) {&amp;#10;                            rise = ((step / Number.parseFloat(futurey)) - bally);&amp;#10;                            run = ((step / Number.parseFloat(futurex)) - ballx);&amp;#10;                            points = [[ballx, bally]];&amp;#10;                            for (var i, _pj_c = 0, _pj_a = util.range(175), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                                i = _pj_a[_pj_c];&amp;#10;                                curPoint = [(points[i][0] - step), ((points[i][1] - step) - 0.008)];&amp;#10;                                points.push(curPoint);&amp;#10;                            }&amp;#10;                            return points;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;part2Two = new CalcPoints(participantBallRightPos[0], participantBallRightPos[1], playerTwoBallPos[0], playerTwoBallPos[1], 0.005, &quot;right&quot;);&amp;#10;part2One = new CalcPoints(participantBallLeftPos[0], participantBallLeftPos[1], playerOneBallPos[0], playerOneBallPos[1], 0.005, &quot;left&quot;);&amp;#10;one2Two = new CalcPoints(playerOneBallPos[0], playerOneBallPos[1], playerTwoBallPos[0], playerTwoBallPos[1], 0.005, &quot;one&quot;);&amp;#10;two2One = new CalcPoints(playerTwoBallPos[0], playerTwoBallPos[1], playerOneBallPos[0], playerOneBallPos[1], 0.005, &quot;two&quot;);&amp;#10;one2Part = new CalcPoints(playerOneBallPos[0], playerOneBallPos[1], participantBallRightPos[0], participantBallRightPos[1], 0.005, &quot;pOne&quot;);&amp;#10;two2Part = new CalcPoints(playerTwoBallPos[0], playerTwoBallPos[1], participantBallRightPos[0], participantBallRightPos[1], 0.005, &quot;pTwo&quot;);&amp;#10;numThrow = 0;&amp;#10;if (((((expCond === &quot;A&quot;) || (expCond === &quot;I&quot;)) || (expCond === &quot;E&quot;)) || (expCond === &quot;M&quot;))) {&amp;#10;    questionType = 1;&amp;#10;} else {&amp;#10;    if (((((expCond === &quot;B&quot;) || (expCond === &quot;F&quot;)) || (expCond === &quot;J&quot;)) || (expCond === &quot;N&quot;))) {&amp;#10;        questionType = 2;&amp;#10;    } else {&amp;#10;        if (((((expCond === &quot;C&quot;) || (expCond === &quot;G&quot;)) || (expCond === &quot;K&quot;)) || (expCond === &quot;O&quot;))) {&amp;#10;            questionType = 3;&amp;#10;        } else {&amp;#10;            if (((((expCond === &quot;D&quot;) || (expCond === &quot;H&quot;)) || (expCond === &quot;L&quot;)) || (expCond === &quot;P&quot;))) {&amp;#10;                questionType = 4;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Game">
      <CodeComponent name="code_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="ParticipantGame = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + Participant)});&amp;#10;PlayerOneGame = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), 0.5], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOne)});&amp;#10;PlayerTwoGame = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, 0.5], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerTwo)});&amp;#10;myBackground.draw();&amp;#10;ParticipantGame.draw();&amp;#10;PlayerOneGame.draw();&amp;#10;PlayerTwoGame.draw();&amp;#10;ball.draw();&amp;#10;myWindow.flip();&amp;#10;if (((((((((expCond === &quot;A&quot;) || (expCond === &quot;B&quot;)) || (expCond === &quot;C&quot;)) || (expCond === &quot;D&quot;)) || (expCond === &quot;I&quot;)) || (expCond === &quot;J&quot;)) || (expCond === &quot;K&quot;)) || (expCond === &quot;L&quot;))) {&amp;#10;    gameType = &quot;play&quot;;&amp;#10;    throwTo = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: throwResp})[0];&amp;#10;} else {&amp;#10;    if (((((((((expCond === &quot;E&quot;) || (expCond === &quot;F&quot;)) || (expCond === &quot;G&quot;)) || (expCond === &quot;H&quot;)) || (expCond === &quot;M&quot;)) || (expCond === &quot;N&quot;)) || (expCond === &quot;O&quot;)) || (expCond === &quot;P&quot;))) {&amp;#10;        gameType = &quot;observe&quot;;&amp;#10;        throwTo = throwResp;&amp;#10;    }&amp;#10;}&amp;#10;if ((gameType === &quot;observe&quot;)) {&amp;#10;    for (var curPoint, _pj_c = 0, _pj_a = part2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        curPoint = _pj_a[_pj_c];&amp;#10;        ball.setPos(curPoint);&amp;#10;        myBackground.draw();&amp;#10;        PlayerOneGame.draw();&amp;#10;        PlayerTwoGame.draw();&amp;#10;        ParticipantGame.draw();&amp;#10;        ball.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(0.01);&amp;#10;        core.wait(0.5);&amp;#10;        numThrow += 1;&amp;#10;    }&amp;#10;    for (var curPoint, _pj_c = 0, _pj_a = two2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        curPoint = _pj_a[_pj_c];&amp;#10;        ball.setPos(curPoint);&amp;#10;        myBackground.draw();&amp;#10;        PlayerOneGame.draw();&amp;#10;        PlayerTwoGame.draw();&amp;#10;        ParticipantGame.draw();&amp;#10;        ball.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(0.01);&amp;#10;        core.wait(0.5);&amp;#10;        numThrow += 1;&amp;#10;    }&amp;#10;    for (var curPoint, _pj_c = 0, _pj_a = one2Part, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        curPoint = _pj_a[_pj_c];&amp;#10;        ball.setPos(curPoint);&amp;#10;        myBackground.draw();&amp;#10;        PlayerOneGame.draw();&amp;#10;        PlayerTwoGame.draw();&amp;#10;        ParticipantGame.draw();&amp;#10;        ball.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(0.01);&amp;#10;        core.wait(0.5);&amp;#10;        numThrow += 1;&amp;#10;    }&amp;#10;    for (var curPoint, _pj_c = 0, _pj_a = part2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        curPoint = _pj_a[_pj_c];&amp;#10;        ball.setPos(curPoint);&amp;#10;        myBackground.draw();&amp;#10;        PlayerOneGame.draw();&amp;#10;        PlayerTwoGame.draw();&amp;#10;        ParticipantGame.draw();&amp;#10;        ball.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(0.01);&amp;#10;        core.wait(0.5);&amp;#10;        numThrow += 1;&amp;#10;    }&amp;#10;    for (var curPoint, _pj_c = 0, _pj_a = one2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        curPoint = _pj_a[_pj_c];&amp;#10;        ball.setPos(curPoint);&amp;#10;        myBackground.draw();&amp;#10;        PlayerOneGame.draw();&amp;#10;        PlayerTwoGame.draw();&amp;#10;        ParticipantGame.draw();&amp;#10;        ball.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(0.01);&amp;#10;        core.wait(0.5);&amp;#10;        numThrow += 1;&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((gameType === &quot;play&quot;)) {&amp;#10;        while ((numThrow &lt; 5)) {&amp;#10;            if ((throwTo === &quot;right&quot;)) {&amp;#10;                for (var curPoint, _pj_c = 0, _pj_a = part2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    curPoint = _pj_a[_pj_c];&amp;#10;                    ball.setPos(curPoint);&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    ball.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                }&amp;#10;                for (var curPoint, _pj_c = 0, _pj_a = two2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    curPoint = _pj_a[_pj_c];&amp;#10;                    ball.setPos(curPoint);&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    ball.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                }&amp;#10;                for (var curPoint, _pj_c = 0, _pj_a = one2Part, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    curPoint = _pj_a[_pj_c];&amp;#10;                    ball.setPos(curPoint);&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    ball.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((throwTo === &quot;left&quot;)) {&amp;#10;                    for (var curPoint, _pj_c = 0, _pj_a = part2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        curPoint = _pj_a[_pj_c];&amp;#10;                        ball.setPos(curPoint);&amp;#10;                        myBackground.draw();&amp;#10;                        PlayerOneGame.draw();&amp;#10;                        PlayerTwoGame.draw();&amp;#10;                        ParticipantGame.draw();&amp;#10;                        ball.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        core.wait(0.01);&amp;#10;                    }&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                    for (var curPoint, _pj_c = 0, _pj_a = one2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        curPoint = _pj_a[_pj_c];&amp;#10;                        ball.setPos(curPoint);&amp;#10;                        myBackground.draw();&amp;#10;                        PlayerOneGame.draw();&amp;#10;                        PlayerTwoGame.draw();&amp;#10;                        ParticipantGame.draw();&amp;#10;                        ball.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        core.wait(0.01);&amp;#10;                    }&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                    for (var curPoint, _pj_c = 0, _pj_a = two2Part, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        curPoint = _pj_a[_pj_c];&amp;#10;                        ball.setPos(curPoint);&amp;#10;                        myBackground.draw();&amp;#10;                        PlayerOneGame.draw();&amp;#10;                        PlayerTwoGame.draw();&amp;#10;                        ParticipantGame.draw();&amp;#10;                        ball.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        core.wait(0.01);&amp;#10;                        core.wait(0.5);&amp;#10;                        numThrow += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throwTo2 = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: keyResp})[0];&amp;#10;            if ((throwTo2 === &quot;right&quot;)) {&amp;#10;                for (var curPoint, _pj_c = 0, _pj_a = part2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    curPoint = _pj_a[_pj_c];&amp;#10;                    ball.setPos(curPoint);&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    ball.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                }&amp;#10;                for (var curPoint, _pj_c = 0, _pj_a = two2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    curPoint = _pj_a[_pj_c];&amp;#10;                    ball.setPos(curPoint);&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    ball.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((throwTo2 === &quot;left&quot;)) {&amp;#10;                    for (var curPoint, _pj_c = 0, _pj_a = part2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        curPoint = _pj_a[_pj_c];&amp;#10;                        ball.setPos(curPoint);&amp;#10;                        myBackground.draw();&amp;#10;                        PlayerOneGame.draw();&amp;#10;                        PlayerTwoGame.draw();&amp;#10;                        ParticipantGame.draw();&amp;#10;                        ball.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        core.wait(0.01);&amp;#10;                        core.wait(0.5);&amp;#10;                        numThrow += 1;&amp;#10;                    }&amp;#10;                    for (var curPoint, _pj_c = 0, _pj_a = one2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        curPoint = _pj_a[_pj_c];&amp;#10;                        ball.setPos(curPoint);&amp;#10;                        myBackground.draw();&amp;#10;                        PlayerOneGame.draw();&amp;#10;                        PlayerTwoGame.draw();&amp;#10;                        ParticipantGame.draw();&amp;#10;                        ball.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        core.wait(0.01);&amp;#10;                        core.wait(0.5);&amp;#10;                        numThrow += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        while ((numThrow &lt; 35)) {&amp;#10;            if ((throwTo2 === &quot;right&quot;)) {&amp;#10;                for (var curPoint, _pj_c = 0, _pj_a = one2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    curPoint = _pj_a[_pj_c];&amp;#10;                    ball.setPos(curPoint);&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    ball.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                }&amp;#10;                for (var curPoint, _pj_c = 0, _pj_a = two2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    curPoint = _pj_a[_pj_c];&amp;#10;                    ball.setPos(curPoint);&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    ball.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((throwTo2 === &quot;left&quot;)) {&amp;#10;                    for (var curPoint, _pj_c = 0, _pj_a = two2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        curPoint = _pj_a[_pj_c];&amp;#10;                        ball.setPos(curPoint);&amp;#10;                        myBackground.draw();&amp;#10;                        PlayerOneGame.draw();&amp;#10;                        PlayerTwoGame.draw();&amp;#10;                        ParticipantGame.draw();&amp;#10;                        ball.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        core.wait(0.01);&amp;#10;                        core.wait(0.5);&amp;#10;                        numThrow += 1;&amp;#10;                    }&amp;#10;                    for (var curPoint, _pj_c = 0, _pj_a = one2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        curPoint = _pj_a[_pj_c];&amp;#10;                        ball.setPos(curPoint);&amp;#10;                        myBackground.draw();&amp;#10;                        PlayerOneGame.draw();&amp;#10;                        PlayerTwoGame.draw();&amp;#10;                        ParticipantGame.draw();&amp;#10;                        ball.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        core.wait(0.01);&amp;#10;                        core.wait(0.5);&amp;#10;                        numThrow += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;ParticipantGame = visual.ImageStim(myWindow, pos= (0, -.5),size= (.23,.45), image= finStimDir+ Participant)&amp;#10;PlayerOneGame = visual.ImageStim(myWindow, pos= (-.5,.5),size= (.23,.45), image= finStimDir+PlayerOne)&amp;#10;PlayerTwoGame= visual.ImageStim(myWindow, pos= (.5,.5),size= (.23,.45), image= finStimDir+PlayerTwo)&amp;#10;#warmup&amp;#10;myBackground.draw()&amp;#10;ParticipantGame.draw()&amp;#10;PlayerOneGame.draw()&amp;#10;PlayerTwoGame.draw()&amp;#10;ball.draw()&amp;#10;myWindow.flip()&amp;#10;&amp;#10;&amp;#10;if expCond == &quot;A&quot; or expCond == &quot;B&quot; or expCond== &quot;C&quot; or expCond==&quot;D&quot; or expCond ==&quot;I&quot; or expCond==&quot;J&quot; or expCond==&quot;K&quot; or expCond==&quot;L&quot;:&amp;#10;    gameType = &quot;play&quot;&amp;#10;    throwTo=event.waitKeys(keyList=throwResp)[0]&amp;#10;&amp;#10;elif expCond == &quot;E&quot; or expCond == &quot;F&quot; or expCond== &quot;G&quot; or expCond==&quot;H&quot; or expCond ==&quot;M&quot; or expCond==&quot;N&quot; or expCond==&quot;O&quot; or expCond==&quot;P&quot;: &amp;#10;    gameType = &quot;observe&quot;&amp;#10;    throwTo= throwResp&amp;#10;&amp;#10;&amp;#10;if gameType == &quot;observe&quot;:&amp;#10;    for curPoint in part2Two:&amp;#10;        ball.setPos(curPoint)#throw 1&amp;#10;        myBackground.draw()&amp;#10;        PlayerOneGame.draw()&amp;#10;        PlayerTwoGame.draw()&amp;#10;        ParticipantGame.draw()&amp;#10;        ball.draw()&amp;#10;        myWindow.flip()&amp;#10;        core.wait(0.01)&amp;#10;        core.wait(0.5)&amp;#10;        numThrow += 1&amp;#10;#            throwball('playerTwo')&amp;#10;    for curPoint in two2One:&amp;#10;        ball.setPos(curPoint)#throw 2&amp;#10;        myBackground.draw()&amp;#10;        PlayerOneGame.draw()&amp;#10;        PlayerTwoGame.draw()&amp;#10;        ParticipantGame.draw()&amp;#10;        ball.draw()&amp;#10;        myWindow.flip()&amp;#10;        core.wait(0.01)&amp;#10;        core.wait(.5)&amp;#10;        numThrow += 1&amp;#10;#            throwball('playerOne')&amp;#10;    for curPoint in one2Part:#throw 3&amp;#10;        ball.setPos(curPoint)&amp;#10;        myBackground.draw()&amp;#10;        PlayerOneGame.draw()&amp;#10;        PlayerTwoGame.draw()&amp;#10;        ParticipantGame.draw()&amp;#10;        ball.draw()&amp;#10;        myWindow.flip()&amp;#10;        core.wait(0.01)&amp;#10;        core.wait(.5)&amp;#10;        numThrow += 1&amp;#10;#               throwball (p1)&amp;#10;    for curPoint in part2One:#throw 4&amp;#10;        ball.setPos(curPoint)&amp;#10;        myBackground.draw()&amp;#10;        PlayerOneGame.draw()&amp;#10;        PlayerTwoGame.draw()&amp;#10;        ParticipantGame.draw()&amp;#10;        ball.draw()&amp;#10;        myWindow.flip()&amp;#10;        core.wait(0.01)&amp;#10;        core.wait(.5)&amp;#10;        numThrow += 1&amp;#10;#               throwball (p1)&amp;#10;    for curPoint in one2Two:#throw 5&amp;#10;        ball.setPos(curPoint)&amp;#10;        myBackground.draw()&amp;#10;        PlayerOneGame.draw()&amp;#10;        PlayerTwoGame.draw()&amp;#10;        ParticipantGame.draw()&amp;#10;        ball.draw()&amp;#10;        myWindow.flip()&amp;#10;        core.wait(0.01)&amp;#10;        core.wait(.5)&amp;#10;        numThrow += 1&amp;#10;elif gameType == &quot;play&quot;:&amp;#10;    while numThrow &lt; 5:&amp;#10;        if throwTo == 'right':&amp;#10;            for curPoint in part2Two: #throw_1r&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1&amp;#10;            for curPoint in two2One: #throw_2r&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1&amp;#10;            for curPoint in one2Part: #throw_3r&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(.5)&amp;#10;                numThrow += 1&amp;#10;        elif throwTo == 'left':&amp;#10;            for curPoint in part2One:#throw_1l&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;            myBackground.draw()&amp;#10;            PlayerOneGame.draw()&amp;#10;            PlayerTwoGame.draw()&amp;#10;            ParticipantGame.draw()&amp;#10;            myWindow.flip()&amp;#10;            core.wait(.01)&amp;#10;            core.wait(.5)&amp;#10;            numThrow+=1&amp;#10;            for curPoint in one2Two: #throw_2l&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;            myBackground.draw()&amp;#10;            PlayerOneGame.draw()&amp;#10;            PlayerTwoGame.draw()&amp;#10;            ParticipantGame.draw()&amp;#10;            myWindow.flip()&amp;#10;            core.wait(.01)&amp;#10;            core.wait(.5)&amp;#10;            numThrow += 1&amp;#10;            for curPoint in two2Part: #throw_3l&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(.5)&amp;#10;                numThrow += 1&amp;#10;        throwTo2 = event.waitKeys(keyList=keyResp)[0]&amp;#10;        if throwTo2 == 'right':&amp;#10;            for curPoint in part2Two: #throw_4r&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1&amp;#10;            for curPoint in two2One: #throw_5r&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1&amp;#10;        elif throwTo2 == 'left':&amp;#10;            for curPoint in part2One:#throw_1l&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow+=1&amp;#10;            for curPoint in one2Two: #throw_2l&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1&amp;#10;#Exclusion piece for observed and for play&amp;#10;    while numThrow &lt; 35:&amp;#10;        if throwTo2 == 'right':&amp;#10;            for curPoint in one2Two: &amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1&amp;#10;            for curPoint in two2One:&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1&amp;#10;        elif throwTo2 == 'left':&amp;#10;            for curPoint in two2One:&amp;#10;                    ball.setPos(curPoint)&amp;#10;                    myBackground.draw()&amp;#10;                    PlayerOneGame.draw()&amp;#10;                    PlayerTwoGame.draw()&amp;#10;                    ParticipantGame.draw()&amp;#10;                    ball.draw()&amp;#10;                    myWindow.flip()&amp;#10;                    core.wait(0.01)&amp;#10;                    core.wait(0.5)&amp;#10;                    numThrow += 1&amp;#10;            for curPoint in one2Two:&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="introductions">
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="obsText= &quot;Hey Look! Here are some people. They're going to play catch. Let's watch!&quot;&amp;#10;playText = &quot;Hey Look! Here are some people. We're going to play catch. Let's play!&quot;&amp;#10;&amp;#10;if expCond == &quot;E&quot; or expCond == &quot;F&quot; or expCond== &quot;G&quot; or expCond==&quot;H&quot; or expCond ==&quot;M&quot; or expCond==&quot;N&quot; or expCond==&quot;O&quot; or expCond==&quot;P&quot;:&amp;#10;    gameType = &quot;observe&quot;&amp;#10;    participantName = &quot;Alex&quot;&amp;#10;    playerTwoName = &quot;Skyler&quot;&amp;#10;    playerOneName = &quot;Taylor&quot;&amp;#10;    greeting = obsText&amp;#10;    gameType2= &quot;play&quot;&amp;#10;    participantNameTwo=&quot;Morgan&quot;&amp;#10;    playerTwoNameTwo=&quot;Jordan&quot;&amp;#10;    playerOneNameTwo= &quot;You&quot;&amp;#10;    greeting2 = playText&amp;#10;elif expCond == &quot;A&quot; or expCond == &quot;B&quot; or expCond== &quot;C&quot; or expCond==&quot;D&quot; or expCond ==&quot;I&quot; or expCond==&quot;J&quot; or expCond==&quot;K&quot; or expCond==&quot;L&quot;: &amp;#10;    gameType= &quot;play&quot;&amp;#10;    playerOneName =  &quot;Morgan&quot;&amp;#10;    playerTwoName = &quot;Jordan&quot;&amp;#10;    participantName = &quot;You&quot;&amp;#10;    greeting = playText&amp;#10;    gameType2= &quot;observe&quot;&amp;#10;    participantNameTwo=&quot;Alex&quot;&amp;#10;    playerTwoNameTwo=&quot;Skyler&quot;&amp;#10;    playerOneNameTwo=&quot;Taylor&quot;&amp;#10;    greeting2 = obsText&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="myBackground.draw();&amp;#10;myWindow.flip();&amp;#10;obsText = &quot;Hey Look! Here are some people. They're going to play catch. Let's watch!&quot;;&amp;#10;playText = &quot;Hey Look! Here are some people. We're going to play catch. Let's play!&quot;;&amp;#10;if (((((((((expCond === &quot;A&quot;) || (expCond === &quot;a&quot;)) || (expCond === &quot;B&quot;)) || (expCond === &quot;b&quot;)) || (expCond === &quot;C&quot;)) || (expCond === &quot;c&quot;)) || (expCond === &quot;D&quot;)) || (expCond === &quot;d&quot;))) {&amp;#10;    gameType = &quot;observe&quot;;&amp;#10;    participantName = &quot;Alex&quot;;&amp;#10;    playerTwoName = &quot;Skyler&quot;;&amp;#10;    playerOneName = &quot;Taylor&quot;;&amp;#10;    greeting = obsText;&amp;#10;} else {&amp;#10;    if (((((((((expCond === &quot;E&quot;) || (expCond === &quot;e&quot;)) || (expCond === &quot;F&quot;)) || (expCond === &quot;f&quot;)) || (expCond === &quot;G&quot;)) || (expCond === &quot;g&quot;)) || (expCond === &quot;H&quot;)) || (expCond === &quot;h&quot;))) {&amp;#10;        gameType = &quot;play&quot;;&amp;#10;        playerOneName = &quot;Morgan&quot;;&amp;#10;        playerTwoName = &quot;Jordan&quot;;&amp;#10;        participantName = &quot;You&quot;;&amp;#10;        greeting = playText;&amp;#10;    }&amp;#10;}&amp;#10;storyText = new visual.TextStim(myWindow, {&quot;text&quot;: greeting, &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;keyControl = new visual.TextStim(myWindow, {&quot;text&quot;: &quot;Press Space to begin&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;, &quot;pos&quot;: [0, (- 0.7)]});&amp;#10;characterOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), 0.15], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOne)});&amp;#10;characterTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.15], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + Participant)});&amp;#10;characterThree = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, 0.15], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerTwo)});&amp;#10;characterOneName = new visual.TextStim(myWindow, {&quot;text&quot;: playerOneName, &quot;pos&quot;: [(- 0.5), (- 0.2)], &quot;color&quot;: &quot;black&quot;});&amp;#10;characterTwoName = new visual.TextStim(myWindow, {&quot;text&quot;: participantName, &quot;pos&quot;: [0, (- 0.2)], &quot;color&quot;: &quot;black&quot;});&amp;#10;characterThreeName = new visual.TextStim(myWindow, {&quot;text&quot;: playerTwoName, &quot;pos&quot;: [0.5, (- 0.2)], &quot;color&quot;: &quot;black&quot;});&amp;#10;myBackground.draw();&amp;#10;storyText.draw();&amp;#10;keyControl.draw();&amp;#10;characterOne.draw();&amp;#10;characterTwo.draw();&amp;#10;characterThree.draw();&amp;#10;characterOneName.draw();&amp;#10;characterTwoName.draw();&amp;#10;characterThreeName.draw();&amp;#10;myWindow.flip();&amp;#10;introKeyChoices = [&quot;space&quot;];&amp;#10;introResponse = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: introKeyChoices})[0];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="myBackground.draw()&amp;#10;myWindow.flip()&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;storyText = visual.TextStim(myWindow, text = greeting, pos =(0, .7), wrapWidth= 1.5, color= 'black')&amp;#10;keyControl = visual.TextStim(myWindow, text = &quot;Press Space to begin&quot;, wrapWidth= 1.5, color= 'black', pos = (0, -.7))&amp;#10;&amp;#10;characterOne = visual.ImageStim(myWindow, pos= (-.5, .15),size= (.23,.45) ,image= finStimDir + PlayerOne)&amp;#10;characterTwo = visual.ImageStim(myWindow, pos= (0, .15),size= (.23,.45) ,image= finStimDir +  Participant)&amp;#10;characterThree= visual.ImageStim(myWindow, pos= (.5, .15),size= (.23,.45) ,image= finStimDir +  PlayerTwo)&amp;#10;characterOneName = visual.TextStim(myWindow, text= playerOneName, pos= (-.5,-.2), color='black')&amp;#10;characterTwoName =visual.TextStim(myWindow, text= participantName, pos= (0,-.2), color='black')&amp;#10;characterThreeName = visual.TextStim(myWindow, text= playerTwoName, pos= (.5,-.2), color='black')&amp;#10;&amp;#10;&amp;#10;myBackground.draw()&amp;#10;storyText.draw()&amp;#10;keyControl.draw()&amp;#10;characterOne.draw()&amp;#10;characterTwo.draw()&amp;#10;characterThree.draw()&amp;#10;characterOneName.draw()&amp;#10;characterTwoName.draw()&amp;#10;characterThreeName.draw()&amp;#10;myWindow.flip()&amp;#10;&amp;#10;introKeyChoices= ['space'] &amp;#10;introResponse = event.waitKeys(keyList= introKeyChoices)[0]&amp;#10;&amp;#10;&amp;#10;if gameType== &quot;play&quot;:&amp;#10;    gameInstr = visual.TextStim(myWindow, text= &quot;To throw the ball left, press the left arrow key. \n\n To \&amp;#10;throw the ball right, press the right arrow key \n\n Press space to begin.&quot;, wrapWidth=1.5, color='black')&amp;#10;    myBackground.draw()&amp;#10;    gameInstr.draw()&amp;#10;    myWindow.flip()&amp;#10;    event.waitKeys(keyList='space')&amp;#10;&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;&amp;#10;    loadText = visual.TextStim(myWindow, text= &quot;Loading...&quot;, pos=(0,0), wrapWidth=1.5, color='black')&amp;#10;    loadShape = visual.Rect(myWindow, size=(0.25,0.25), pos= (-1,-0.2), fillColor= 'aquamarine')&amp;#10;&amp;#10;    move= 0&amp;#10;&amp;#10;    while move &lt; 80:&amp;#10;        loadShape.pos +=(0.03, 0.0)&amp;#10;        myBackground.draw()&amp;#10;        loadText.draw()&amp;#10;        loadShape.draw()&amp;#10;        myWindow.flip()&amp;#10;        core.wait(.05)&amp;#10;        move= move + 1&amp;#10;&amp;#10;elif gameType == &quot;observe&quot;:&amp;#10;    loadText = visual.TextStim(myWindow, text= &quot;Loading...&quot;, pos=(0,0), wrapWidth=1.5, color='black')&amp;#10;    loadShape = visual.Rect(myWindow, size=(0.25,0.25), pos= (-1,-0.2), fillColor= 'aquamarine')&amp;#10;&amp;#10;    move= 0&amp;#10;&amp;#10;    while move &lt; 80:&amp;#10;        loadShape.pos +=(0.03, 0.0)&amp;#10;        myBackground.draw()&amp;#10;        loadText.draw()&amp;#10;        loadShape.draw()&amp;#10;        myWindow.flip()&amp;#10;        core.wait(.05)&amp;#10;        move= move + 1" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="questions">
      <CodeComponent name="code_8">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((questionType === 1)) {&amp;#10;    charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Did &quot; + participantName) + &quot; get to play or have to watch?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + Participant)});&amp;#10;    chooseOne = new visual.TextStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;text&quot;: &quot;Play&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    chooseTwo = new visual.TextStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;text&quot;: &quot;Watch&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    myBackground.draw();&amp;#10;    charText.draw();&amp;#10;    optionOne.draw();&amp;#10;    chooseOne.draw();&amp;#10;    chooseTwo.draw();&amp;#10;    myWindow.flip();&amp;#10;    choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;    response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;    if ((response === &quot;left&quot;)) {&amp;#10;        console.log(&quot;play&quot;);&amp;#10;    } else {&amp;#10;        console.log(&quot;watch&quot;);&amp;#10;    }&amp;#10;    charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Is &quot; + playerOneName) + &quot; nice or not nice?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;size&quot;: [0.5, 0.5], &quot;image&quot;: (finStimDir + &quot;NiceNotNice.png&quot;)});&amp;#10;    optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOne)});&amp;#10;    myBackground.draw();&amp;#10;    optionOne.draw();&amp;#10;    optionTwo.draw();&amp;#10;    charText.draw();&amp;#10;    myWindow.flip();&amp;#10;    choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;    response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;    if ((response === &quot;left&quot;)) {&amp;#10;        console.log(&quot;nice&quot;);&amp;#10;        scaleNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NiceScale.png&quot;)});&amp;#10;        scaleNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.7], &quot;text&quot;: ((&quot;Is &quot; + playerOneName) + &quot; a little nice, nice, or really nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        myBackground.draw();&amp;#10;        scaleNiceText.draw();&amp;#10;        scaleNice.draw();&amp;#10;        optionTwo.draw();&amp;#10;        myWindow.flip();&amp;#10;        niceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;        responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: niceScaleChoice})[0];&amp;#10;    } else {&amp;#10;        if ((response === &quot;right&quot;)) {&amp;#10;            console.log(&quot;not nice&quot;);&amp;#10;            scaleNotNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NotNiceScale.png&quot;)});&amp;#10;            scaleNotNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.7], &quot;text&quot;: ((&quot;Is &quot; + playerOneName) + &quot; a little not nice, not nice, or really not nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            myBackground.draw();&amp;#10;            scaleNotNiceText.draw();&amp;#10;            scaleNotNice.draw();&amp;#10;            optionTwo.draw();&amp;#10;            myWindow.flip();&amp;#10;            notniceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;            responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: notniceScaleChoice})[0];&amp;#10;        } else {&amp;#10;            console.log(&quot;whoops! does not work&quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    myBackground.draw();&amp;#10;    myWindow.flip();&amp;#10;    core.wait(1);&amp;#10;    myBackground.draw();&amp;#10;    myWindow.flip();&amp;#10;    charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneName) + &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;size&quot;: [0.5, 0.5], &quot;image&quot;: (finStimDir + &quot;Play.png&quot;)});&amp;#10;    optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOne)});&amp;#10;    optionThree = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;size&quot;: [0.5, 0.5], &quot;image&quot;: (finStimDir + &quot;NoPlay.png&quot;)});&amp;#10;    myBackground.draw();&amp;#10;    optionOne.draw();&amp;#10;    optionTwo.draw();&amp;#10;    optionThree.draw();&amp;#10;    charText.draw();&amp;#10;    myWindow.flip();&amp;#10;    choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;    response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;    if ((response === &quot;left&quot;)) {&amp;#10;        console.log(&quot;play&quot;);&amp;#10;        scalePlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        scalePlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneName) + &quot; let you play?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        myBackground.draw();&amp;#10;        scalePlayText.draw();&amp;#10;        scalePlay.draw();&amp;#10;        optionTwo.draw();&amp;#10;        myWindow.flip();&amp;#10;        PlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;        responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: PlayScaleChoice})[0];&amp;#10;    } else {&amp;#10;        if ((response === &quot;right&quot;)) {&amp;#10;            console.log(&quot;play&quot;);&amp;#10;            scalenoPlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            scalenoPlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneName) + &quot; not play with you?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            myBackground.draw();&amp;#10;            scalenoPlayText.draw();&amp;#10;            scalenoPlay.draw();&amp;#10;            optionTwo.draw();&amp;#10;            myWindow.flip();&amp;#10;            noPlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;            responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: noPlayScaleChoice})[0];&amp;#10;        } else {&amp;#10;            console.log(&quot;whoops! does not work&quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    myBackground.draw();&amp;#10;    myWindow.flip();&amp;#10;    core.wait(1);&amp;#10;    myBackground.draw();&amp;#10;    myWindow.flip();&amp;#10;    charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneName) + &quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces to them or keep them?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;size&quot;: [0.5, 0.5], &quot;image&quot;: (finStimDir + &quot;PuzzlePieces.png&quot;)});&amp;#10;    optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOnePuzzle)});&amp;#10;    myBackground.draw();&amp;#10;    optionOne.draw();&amp;#10;    optionTwo.draw();&amp;#10;    charText.draw();&amp;#10;    myWindow.flip();&amp;#10;    choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;    response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;    if ((response === &quot;left&quot;)) {&amp;#10;        console.log(&quot;give pieces&quot;);&amp;#10;        scalePuzzleGive = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        scalePuzzleGiveText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How many pieces do you want to give &quot; + playerOneName) + &quot; ?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        myBackground.draw();&amp;#10;        scalePuzzleGiveText.draw();&amp;#10;        scalePuzzleGive.draw();&amp;#10;        optionTwo.draw();&amp;#10;        myWindow.flip();&amp;#10;        GiveScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;        responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: GiveScaleChoice})[0];&amp;#10;    } else {&amp;#10;        if ((response === &quot;right&quot;)) {&amp;#10;            console.log(&quot;keep pieces&quot;);&amp;#10;            scalePuzzleKeep = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            scalePuzzleKeepText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: &quot;How many pieces do you want to keep?&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            myBackground.draw();&amp;#10;            scalePuzzleKeepText.draw();&amp;#10;            scalePuzzleKeep.draw();&amp;#10;            optionTwo.draw();&amp;#10;            myWindow.flip();&amp;#10;            KeepScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;            responseKeepScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: KeepScaleChoice})[0];&amp;#10;        } else {&amp;#10;            console.log(&quot;whoops! does not work&quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    myBackground.draw();&amp;#10;    myWindow.flip();&amp;#10;    core.wait(1);&amp;#10;    myBackground.draw();&amp;#10;    myWindow.flip();&amp;#10;    charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;We are going to play another game. This game need two people. Do you want to work with &quot; + playerOneName) + &quot; or someone else?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOne)});&amp;#10;    optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), 0], &quot;image&quot;: (finStimDir + &quot;work_together.png&quot;)});&amp;#10;    myBackground.draw();&amp;#10;    optionOne.draw();&amp;#10;    optionTwo.draw();&amp;#10;    charText.draw();&amp;#10;    myWindow.flip();&amp;#10;    choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;    response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;    if ((response === &quot;left&quot;)) {&amp;#10;        console.log(&quot;together&quot;);&amp;#10;    } else {&amp;#10;        if ((response === &quot;right&quot;)) {&amp;#10;            console.log(&quot;someone else&quot;);&amp;#10;        } else {&amp;#10;            console.log(&quot;whoops! does not work&quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    myBackground.draw();&amp;#10;    myWindow.flip();&amp;#10;    core.wait(1);&amp;#10;} else {&amp;#10;    if ((questionType === 2)) {&amp;#10;        charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Did &quot; + participantName) + &quot; get to play or have to watch?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + Participant)});&amp;#10;        chooseOne = new visual.TextStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;text&quot;: &quot;Play&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        chooseTwo = new visual.TextStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;text&quot;: &quot;Watch&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        myBackground.draw();&amp;#10;        charText.draw();&amp;#10;        optionOne.draw();&amp;#10;        chooseOne.draw();&amp;#10;        chooseTwo.draw();&amp;#10;        myWindow.flip();&amp;#10;        choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;        response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;        if ((response === &quot;left&quot;)) {&amp;#10;            console.log(&quot;play&quot;);&amp;#10;        } else {&amp;#10;            console.log(&quot;watch&quot;);&amp;#10;        }&amp;#10;        myBackground.draw();&amp;#10;        myWindow.flip();&amp;#10;        charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneName) + &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;Play.png&quot;)});&amp;#10;        optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOne)});&amp;#10;        optionThree = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NoPlay.png&quot;)});&amp;#10;        myBackground.draw();&amp;#10;        optionOne.draw();&amp;#10;        optionTwo.draw();&amp;#10;        optionThree.draw();&amp;#10;        charText.draw();&amp;#10;        myWindow.flip();&amp;#10;        choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;        response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;        if ((response === &quot;left&quot;)) {&amp;#10;            console.log(&quot;play&quot;);&amp;#10;            scalePlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            scalePlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneName) + &quot; let you play?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            myBackground.draw();&amp;#10;            scalePlayText.draw();&amp;#10;            scalePlay.draw();&amp;#10;            optionTwo.draw();&amp;#10;            myWindow.flip();&amp;#10;            PlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;            responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: PlayScaleChoice})[0];&amp;#10;        } else {&amp;#10;            if ((response === &quot;right&quot;)) {&amp;#10;                console.log(&quot;play&quot;);&amp;#10;                scalenoPlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                scalenoPlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneName) + &quot; not play with you?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                myBackground.draw();&amp;#10;                scalenoPlayText.draw();&amp;#10;                scalenoPlay.draw();&amp;#10;                optionTwo.draw();&amp;#10;                myWindow.flip();&amp;#10;                noPlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: noPlayScaleChoice})[0];&amp;#10;            } else {&amp;#10;                console.log(&quot;whoops! does not work&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;        myBackground.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(1);&amp;#10;        charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Is &quot; + playerOneName) + &quot; nice or not nice?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NiceNotNice.png&quot;)});&amp;#10;        optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOne)});&amp;#10;        myBackground.draw();&amp;#10;        optionOne.draw();&amp;#10;        optionTwo.draw();&amp;#10;        charText.draw();&amp;#10;        myWindow.flip();&amp;#10;        choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;        response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;        if ((response === &quot;left&quot;)) {&amp;#10;            console.log(&quot;nice&quot;);&amp;#10;            scaleNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NiceScale.png&quot;)});&amp;#10;            scaleNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;Is &quot; + playerOneName) + &quot; a little nice, nice, or really nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            myBackground.draw();&amp;#10;            scaleNiceText.draw();&amp;#10;            scaleNice.draw();&amp;#10;            optionTwo.draw();&amp;#10;            myWindow.flip();&amp;#10;            niceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;            responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: niceScaleChoice})[0];&amp;#10;        } else {&amp;#10;            if ((response === &quot;right&quot;)) {&amp;#10;                console.log(&quot;not nice&quot;);&amp;#10;                scaleNotNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NotNiceScale.png&quot;)});&amp;#10;                scaleNotNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;Is &quot; + playerOneName) + &quot; a little not nice, not nice, or really not nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                myBackground.draw();&amp;#10;                scaleNotNiceText.draw();&amp;#10;                optionTwo.draw();&amp;#10;                myWindow.flip();&amp;#10;                notniceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: notniceScaleChoice})[0];&amp;#10;            } else {&amp;#10;                console.log(&quot;whoops! does not work&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;        myBackground.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(1);&amp;#10;        myBackground.draw();&amp;#10;        myWindow.flip();&amp;#10;        charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;We are going to play another game. This game need two people. Do you want to work with &quot; + playerOneName) + &quot; or someone else?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOne)});&amp;#10;        optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), 0], &quot;image&quot;: (finStimDir + &quot;work_together.png&quot;)});&amp;#10;        myBackground.draw();&amp;#10;        optionOne.draw();&amp;#10;        optionTwo.draw();&amp;#10;        charText.draw();&amp;#10;        myWindow.flip();&amp;#10;        choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;        response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;        if ((response === &quot;left&quot;)) {&amp;#10;            console.log(&quot;together&quot;);&amp;#10;        } else {&amp;#10;            if ((response === &quot;right&quot;)) {&amp;#10;                console.log(&quot;someone else&quot;);&amp;#10;            } else {&amp;#10;                console.log(&quot;whoops! does not work&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;        myBackground.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(1);&amp;#10;        myBackground.draw();&amp;#10;        myWindow.flip();&amp;#10;        charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneName) + &quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces to them  or keep them?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;PuzzlePieces.png&quot;)});&amp;#10;        optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOnePuzzle)});&amp;#10;        myBackground.draw();&amp;#10;        optionOne.draw();&amp;#10;        optionTwo.draw();&amp;#10;        charText.draw();&amp;#10;        myWindow.flip();&amp;#10;        choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;        response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;        if ((response === &quot;left&quot;)) {&amp;#10;            console.log(&quot;give pieces&quot;);&amp;#10;            scalePuzzleGive = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            scalePuzzleGiveText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How many pieces do you want to give &quot; + playerOneName) + &quot; ?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            myBackground.draw();&amp;#10;            scalePuzzleGiveText.draw();&amp;#10;            scalePuzzleGive.draw();&amp;#10;            optionTwo.draw();&amp;#10;            myWindow.flip();&amp;#10;            GiveScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;            responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: GiveScaleChoice})[0];&amp;#10;        } else {&amp;#10;            if ((response === &quot;right&quot;)) {&amp;#10;                console.log(&quot;keep pieces&quot;);&amp;#10;                scalePuzzleKeep = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                scalePuzzleKeepText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: &quot;How many pieces do you want to keep?&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                myBackground.draw();&amp;#10;                scalePuzzleKeepText.draw();&amp;#10;                scalePuzzleKeep.draw();&amp;#10;                optionTwo.draw();&amp;#10;                myWindow.flip();&amp;#10;                KeepScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                responseKeepScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: KeepScaleChoice})[0];&amp;#10;            } else {&amp;#10;                console.log(&quot;whoops! does not work&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;        myBackground.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(1);&amp;#10;    } else {&amp;#10;        if ((questionType === 3)) {&amp;#10;            charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Is &quot; + playerOneName) + &quot; nice or not nice?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NiceNotNice.png&quot;)});&amp;#10;            optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOne)});&amp;#10;            myBackground.draw();&amp;#10;            optionOne.draw();&amp;#10;            optionTwo.draw();&amp;#10;            charText.draw();&amp;#10;            myWindow.flip();&amp;#10;            choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;            response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;            if ((response === &quot;left&quot;)) {&amp;#10;                console.log(&quot;nice&quot;);&amp;#10;                scaleNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NiceScale.png&quot;)});&amp;#10;                scaleNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;Is &quot; + playerOneName) + &quot; a little nice, nice, or really nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                myBackground.draw();&amp;#10;                scaleNiceText.draw();&amp;#10;                scaleNice.draw();&amp;#10;                optionTwo.draw();&amp;#10;                myWindow.flip();&amp;#10;                niceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: niceScaleChoice})[0];&amp;#10;            } else {&amp;#10;                if ((response === &quot;right&quot;)) {&amp;#10;                    console.log(&quot;not nice&quot;);&amp;#10;                    scaleNotNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NotNiceScale.png&quot;)});&amp;#10;                    scaleNotNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;Is &quot; + playerOneName) + &quot; a little not nice, not nice, or really not nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    myBackground.draw();&amp;#10;                    scaleNotNiceText.draw();&amp;#10;                    optionTwo.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    notniceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                    responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: notniceScaleChoice})[0];&amp;#10;                } else {&amp;#10;                    console.log(&quot;whoops! does not work&quot;);&amp;#10;                }&amp;#10;            }&amp;#10;            myBackground.draw();&amp;#10;            myWindow.flip();&amp;#10;            core.wait(1);&amp;#10;            myBackground.draw();&amp;#10;            myWindow.flip();&amp;#10;            charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneName) + &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;Play.png&quot;)});&amp;#10;            optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOne)});&amp;#10;            optionThree = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NoPlay.png&quot;)});&amp;#10;            myBackground.draw();&amp;#10;            optionOne.draw();&amp;#10;            optionTwo.draw();&amp;#10;            optionThree.draw();&amp;#10;            charText.draw();&amp;#10;            myWindow.flip();&amp;#10;            choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;            response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;            if ((response === &quot;left&quot;)) {&amp;#10;                console.log(&quot;play&quot;);&amp;#10;                scalePlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                scalePlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneName) + &quot; let you play?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                myBackground.draw();&amp;#10;                scalePlayText.draw();&amp;#10;                scalePlay.draw();&amp;#10;                optionTwo.draw();&amp;#10;                myWindow.flip();&amp;#10;                PlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: PlayScaleChoice})[0];&amp;#10;            } else {&amp;#10;                if ((response === &quot;right&quot;)) {&amp;#10;                    console.log(&quot;play&quot;);&amp;#10;                    scalenoPlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    scalenoPlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneName) + &quot; not play with you?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    myBackground.draw();&amp;#10;                    scalenoPlayText.draw();&amp;#10;                    scalenoPlay.draw();&amp;#10;                    optionTwo.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    noPlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                    responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: noPlayScaleChoice})[0];&amp;#10;                } else {&amp;#10;                    console.log(&quot;whoops! does not work&quot;);&amp;#10;                }&amp;#10;            }&amp;#10;            myBackground.draw();&amp;#10;            myWindow.flip();&amp;#10;            core.wait(1);&amp;#10;            myBackground.draw();&amp;#10;            myWindow.flip();&amp;#10;            charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneName) + &quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces them or keep them?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;PuzzlePieces.png&quot;)});&amp;#10;            optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOnePuzzle)});&amp;#10;            myBackground.draw();&amp;#10;            optionOne.draw();&amp;#10;            optionTwo.draw();&amp;#10;            charText.draw();&amp;#10;            myWindow.flip();&amp;#10;            choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;            response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;            if ((response === &quot;left&quot;)) {&amp;#10;                console.log(&quot;give pieces&quot;);&amp;#10;                scalePuzzleGive = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                scalePuzzleGiveText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How many pieces do you want to give &quot; + playerOneName) + &quot; ?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                myBackground.draw();&amp;#10;                scalePuzzleGiveText.draw();&amp;#10;                scalePuzzleGive.draw();&amp;#10;                optionTwo.draw();&amp;#10;                myWindow.flip();&amp;#10;                GiveScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: GiveScaleChoice})[0];&amp;#10;            } else {&amp;#10;                if ((response === &quot;right&quot;)) {&amp;#10;                    console.log(&quot;keep pieces&quot;);&amp;#10;                    scalePuzzleKeep = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    scalePuzzleKeepText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: &quot;How many pieces do you want to keep?&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    myBackground.draw();&amp;#10;                    scalePuzzleKeepText.draw();&amp;#10;                    scalePuzzleKeep.draw();&amp;#10;                    optionTwo.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    KeepScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                    responseKeepScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: KeepScaleChoice})[0];&amp;#10;                } else {&amp;#10;                    console.log(&quot;whoops! does not work&quot;);&amp;#10;                }&amp;#10;            }&amp;#10;            myBackground.draw();&amp;#10;            myWindow.flip();&amp;#10;            core.wait(1);&amp;#10;            myBackground.draw();&amp;#10;            myWindow.flip();&amp;#10;            charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;We are going to play another game. This game need two people. Do you want to work with &quot; + playerOneName) + &quot; or someone else?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, 0], &quot;image&quot;: (finStimDir + PlayerOne)});&amp;#10;            optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), 0], &quot;image&quot;: (finStimDir + &quot;work_together.png&quot;)});&amp;#10;            myBackground.draw();&amp;#10;            optionOne.draw();&amp;#10;            optionTwo.draw();&amp;#10;            charText.draw();&amp;#10;            myWindow.flip();&amp;#10;            choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;            response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;            if ((response === &quot;left&quot;)) {&amp;#10;                console.log(&quot;together&quot;);&amp;#10;            } else {&amp;#10;                if ((response === &quot;right&quot;)) {&amp;#10;                    console.log(&quot;someone else&quot;);&amp;#10;                } else {&amp;#10;                    console.log(&quot;whoops! does not work&quot;);&amp;#10;                }&amp;#10;            }&amp;#10;            myBackground.draw();&amp;#10;            myWindow.flip();&amp;#10;            core.wait(1);&amp;#10;            charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Did &quot; + participantName) + &quot; get to play or have to watch?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + Participant)});&amp;#10;            chooseOne = new visual.TextStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;text&quot;: &quot;Play&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            chooseTwo = new visual.TextStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;text&quot;: &quot;Watch&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            myBackground.draw();&amp;#10;            charText.draw();&amp;#10;            optionOne.draw();&amp;#10;            chooseOne.draw();&amp;#10;            chooseTwo.draw();&amp;#10;            myWindow.flip();&amp;#10;            choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;            response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;            if ((response === &quot;left&quot;)) {&amp;#10;                console.log(&quot;play&quot;);&amp;#10;            } else {&amp;#10;                console.log(&quot;watch&quot;);&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((questionType === 4)) {&amp;#10;                myBackground.draw();&amp;#10;                myWindow.flip();&amp;#10;                charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneName) + &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;Play.png&quot;)});&amp;#10;                optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOne)});&amp;#10;                optionThree = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NoPlay.png&quot;)});&amp;#10;                myBackground.draw();&amp;#10;                optionOne.draw();&amp;#10;                optionTwo.draw();&amp;#10;                optionThree.draw();&amp;#10;                charText.draw();&amp;#10;                myWindow.flip();&amp;#10;                choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;                response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;                if ((response === &quot;left&quot;)) {&amp;#10;                    console.log(&quot;play&quot;);&amp;#10;                    scalePlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    scalePlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneName) + &quot; let you play?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    myBackground.draw();&amp;#10;                    scalePlayText.draw();&amp;#10;                    scalePlay.draw();&amp;#10;                    optionTwo.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    PlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                    responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: PlayScaleChoice})[0];&amp;#10;                } else {&amp;#10;                    if ((response === &quot;right&quot;)) {&amp;#10;                        console.log(&quot;play&quot;);&amp;#10;                        scalenoPlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                        scalenoPlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneName) + &quot; not play with you?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                        myBackground.draw();&amp;#10;                        scalenoPlayText.draw();&amp;#10;                        scalenoPlay.draw();&amp;#10;                        optionTwo.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        noPlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                        responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: noPlayScaleChoice})[0];&amp;#10;                    } else {&amp;#10;                        console.log(&quot;whoops! does not work&quot;);&amp;#10;                    }&amp;#10;                }&amp;#10;                myBackground.draw();&amp;#10;                myWindow.flip();&amp;#10;                core.wait(1);&amp;#10;                charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Is &quot; + playerOneName) + &quot; nice or not nice?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NiceNotNice.png&quot;)});&amp;#10;                optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOne)});&amp;#10;                myBackground.draw();&amp;#10;                optionOne.draw();&amp;#10;                optionTwo.draw();&amp;#10;                charText.draw();&amp;#10;                myWindow.flip();&amp;#10;                choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;                response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;                if ((response === &quot;left&quot;)) {&amp;#10;                    console.log(&quot;nice&quot;);&amp;#10;                    scaleNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NiceScale.png&quot;)});&amp;#10;                    scaleNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;Is &quot; + playerOneName) + &quot; a little nice, nice, or really nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    myBackground.draw();&amp;#10;                    scaleNiceText.draw();&amp;#10;                    scaleNice.draw();&amp;#10;                    optionTwo.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    niceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                    responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: niceScaleChoice})[0];&amp;#10;                } else {&amp;#10;                    if ((response === &quot;right&quot;)) {&amp;#10;                        console.log(&quot;not nice&quot;);&amp;#10;                        scaleNotNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NotNiceScale.png&quot;)});&amp;#10;                        scaleNotNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;Is &quot; + playerOneName) + &quot; a little not nice, not nice, or really not nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                        myBackground.draw();&amp;#10;                        scaleNotNiceText.draw();&amp;#10;                        optionTwo.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        notniceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                        responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: notniceScaleChoice})[0];&amp;#10;                    } else {&amp;#10;                        console.log(&quot;whoops! does not work&quot;);&amp;#10;                    }&amp;#10;                }&amp;#10;                myBackground.draw();&amp;#10;                myWindow.flip();&amp;#10;                core.wait(1);&amp;#10;                myBackground.draw();&amp;#10;                myWindow.flip();&amp;#10;                charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;We are going to play another game. This game need two people. Do you want to work with &quot; + playerOneName) + &quot; or someone else?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                optionOne = new visual.ImageStim(myWindow, {&quot;size&quot;: [0.23, 0.45], &quot;pos&quot;: [0.5, 0], &quot;image&quot;: (finStimDir + PlayerOne)});&amp;#10;                optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), 0], &quot;image&quot;: (finStimDir + &quot;work_together.png&quot;)});&amp;#10;                myBackground.draw();&amp;#10;                optionOne.draw();&amp;#10;                optionTwo.draw();&amp;#10;                charText.draw();&amp;#10;                myWindow.flip();&amp;#10;                choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;                response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;                if ((response === &quot;left&quot;)) {&amp;#10;                    console.log(&quot;together&quot;);&amp;#10;                } else {&amp;#10;                    if ((response === &quot;right&quot;)) {&amp;#10;                        console.log(&quot;someone else&quot;);&amp;#10;                    } else {&amp;#10;                        console.log(&quot;whoops! does not work&quot;);&amp;#10;                    }&amp;#10;                }&amp;#10;                myBackground.draw();&amp;#10;                myWindow.flip();&amp;#10;                core.wait(1);&amp;#10;                myBackground.draw();&amp;#10;                myWindow.flip();&amp;#10;                charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneName) + &quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces to them or keep them?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;PuzzlePieces.png&quot;)});&amp;#10;                optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOnePuzzle)});&amp;#10;                myBackground.draw();&amp;#10;                optionOne.draw();&amp;#10;                optionTwo.draw();&amp;#10;                charText.draw();&amp;#10;                myWindow.flip();&amp;#10;                choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;                response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;                if ((response === &quot;left&quot;)) {&amp;#10;                    console.log(&quot;give pieces&quot;);&amp;#10;                    scalePuzzleGive = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    scalePuzzleGiveText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How many pieces do you want to give &quot; + playerOneName) + &quot; ?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    myBackground.draw();&amp;#10;                    scalePuzzleGiveText.draw();&amp;#10;                    scalePuzzleGive.draw();&amp;#10;                    optionTwo.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    GiveScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                    responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: GiveScaleChoice})[0];&amp;#10;                } else {&amp;#10;                    if ((response === &quot;right&quot;)) {&amp;#10;                        console.log(&quot;keep pieces&quot;);&amp;#10;                        scalePuzzleKeep = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                        scalePuzzleKeepText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: &quot;How many pieces do you want to keep?&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                        myBackground.draw();&amp;#10;                        scalePuzzleKeepText.draw();&amp;#10;                        scalePuzzleKeep.draw();&amp;#10;                        optionTwo.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        KeepScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                        responseKeepScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: KeepScaleChoice})[0];&amp;#10;                    } else {&amp;#10;                        console.log(&quot;whoops! does not work&quot;);&amp;#10;                    }&amp;#10;                }&amp;#10;                myBackground.draw();&amp;#10;                myWindow.flip();&amp;#10;                core.wait(1);&amp;#10;                charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Did &quot; + participantName) + &quot; get to play or have to watch?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + Participant)});&amp;#10;                chooseOne = new visual.TextStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;text&quot;: &quot;Play&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                chooseTwo = new visual.TextStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;text&quot;: &quot;Watch&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                myBackground.draw();&amp;#10;                charText.draw();&amp;#10;                optionOne.draw();&amp;#10;                chooseOne.draw();&amp;#10;                chooseTwo.draw();&amp;#10;                myWindow.flip();&amp;#10;                choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;                response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;                if ((response === &quot;left&quot;)) {&amp;#10;                    console.log(&quot;play&quot;);&amp;#10;                } else {&amp;#10;                    console.log(&quot;watch&quot;);&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;&amp;#10;if questionType==1:&amp;#10;    #MC&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Did &quot; + participantName + &quot; get to play or have to watch?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, 0), size = (.23,.45), image= finStimDir + Participant )&amp;#10;    chooseOne= visual.TextStim(myWindow, pos=(-.5, -.5), text= &quot;Play&quot;, wrapWidth=1.5, color='black')&amp;#10;    chooseTwo= visual.TextStim(myWindow, pos=(.5, -.5), text= &quot;Watch&quot;, wrapWidth=1.5, color='black')&amp;#10;    myBackground.draw()&amp;#10;    charText.draw()&amp;#10;    optionOne.draw()&amp;#10;    chooseOne.draw()&amp;#10;    chooseTwo.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;    else:&amp;#10;        print(&quot;watch&quot;)&amp;#10;    #Nice&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Is &quot;+ playerOneName +&quot; nice or not nice?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), size= (.5,.5), image= finStimDir + 'NiceNotNice.png' )&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3), size = (.23,.45),image= finStimDir + PlayerOne)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;nice&quot;)&amp;#10;        scaleNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NiceScale.png')&amp;#10;        scaleNiceText= visual.TextStim(myWindow, pos = (0,.7), text = &quot;Is &quot;+ playerOneName +&quot; a little nice, nice, or really nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNiceText.draw()&amp;#10;        scaleNice.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        niceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = niceScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;not nice&quot;)&amp;#10;        scaleNotNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NotNiceScale.png')&amp;#10;        scaleNotNiceText= visual.TextStim(myWindow, pos = (0,.7), text = &quot;Is &quot;+ playerOneName+&quot; a little not nice, not nice, or really not nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNotNiceText.draw()&amp;#10;        scaleNotNice.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        notniceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = notniceScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;    #Play&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot; + playerOneName + &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (-.5, -.5), size= (.5,.5),image= finStimDir + 'Play.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,0), size=(.23,.45), image= finStimDir + PlayerOne)&amp;#10;    optionThree = visual.ImageStim(myWindow, pos= (.5, -.5), size=(.5,.5), image= finStimDir + 'NoPlay.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    optionThree.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalePlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+playerOneName+&quot; let you play?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePlayText.draw()&amp;#10;        scalePlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        PlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = PlayScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalenoPlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalenoPlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+ playerOneName+&quot; not play with you?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalenoPlayText.draw()&amp;#10;        scalenoPlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        noPlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = noPlayScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;&amp;#10;    #Help&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot;+playerOneName+&quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces to them or keep them?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), size =(.5,.5), image= finStimDir + 'PuzzlePieces.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3), size=(.23,.45),image= finStimDir + PlayerOnePuzzle)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;give pieces&quot;)&amp;#10;        scalePuzzleGive = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleGiveText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to give &quot;+ playerOneName+&quot; ?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleGiveText.draw()&amp;#10;        scalePuzzleGive.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        GiveScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = GiveScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;keep pieces&quot;)&amp;#10;        scalePuzzleKeep = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleKeepText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to keep?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleKeepText.draw()&amp;#10;        scalePuzzleKeep.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        KeepScaleChoice = ['left', 'up', 'right']&amp;#10;        responseKeepScale= event.waitKeys(keyList = KeepScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;    #cooperate&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;We are going to play another game. This game need two people. Do you want to work with &quot;+ playerOneName+ &quot; or someone else?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;&amp;#10;&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (.5, 0), size= (.23,.45), image= finStimDir + PlayerOne)&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (-.5,0), image= finStimDir + 'work_together.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;&amp;#10;    if response == 'left':&amp;#10;        print(&quot;together&quot;)&amp;#10;&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;someone else&quot;)&amp;#10;&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;&amp;#10;elif questionType==2:&amp;#10;    #MC&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Did &quot; + participantName + &quot; get to play or have to watch?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, 0), size = (.23,.45), image= finStimDir + Participant )&amp;#10;    chooseOne= visual.TextStim(myWindow, pos=(-.5, -.5), text= &quot;Play&quot;, wrapWidth=1.5, color='black')&amp;#10;    chooseTwo= visual.TextStim(myWindow, pos=(.5, -.5), text= &quot;Watch&quot;, wrapWidth=1.5, color='black')&amp;#10;    myBackground.draw()&amp;#10;    charText.draw()&amp;#10;    optionOne.draw()&amp;#10;    chooseOne.draw()&amp;#10;    chooseTwo.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;    else:&amp;#10;        print(&quot;watch&quot;)&amp;#10;    #Play&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot; + playerOneName + &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (.5, -.5), image= finStimDir + 'Play.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,0), size = (.23,.45), image= finStimDir + PlayerOne)&amp;#10;    optionThree = visual.ImageStim(myWindow, pos= (-.5, -.5), image= finStimDir + 'NoPlay.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    optionThree.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalePlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+playerOneName+&quot; let you play?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePlayText.draw()&amp;#10;        scalePlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        PlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = PlayScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalenoPlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalenoPlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+ playerOneName+&quot; not play with you?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalenoPlayText.draw()&amp;#10;        scalenoPlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        noPlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = noPlayScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;&amp;#10;    #Nice&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Is &quot;+ playerOneName +&quot; nice or not nice?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), image= finStimDir + 'NiceNotNice.png' )&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3), size = (.23,.45),image= finStimDir + PlayerOne)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;nice&quot;)&amp;#10;        scaleNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NiceScale.png')&amp;#10;        scaleNiceText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;Is &quot;+ playerOneName +&quot; a little nice, nice, or really nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNiceText.draw()&amp;#10;        scaleNice.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        niceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = niceScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;not nice&quot;)&amp;#10;        scaleNotNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NotNiceScale.png')&amp;#10;        scaleNotNiceText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;Is &quot;+ playerOneName+&quot; a little not nice, not nice, or really not nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNotNiceText.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        notniceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = notniceScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;    #Cooperate&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;We are going to play another game. This game need two people. Do you want to work with &quot;+ playerOneName+ &quot; or someone else?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;&amp;#10;&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (.5, 0),size= (.23,.45), image= finStimDir + PlayerOne)&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (-.5,0), image= finStimDir + 'work_together.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;&amp;#10;    if response == 'left':&amp;#10;        print(&quot;together&quot;)&amp;#10;&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;someone else&quot;)&amp;#10;&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;&amp;#10;    #Help&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot;+playerOneName+&quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces to them  or keep them?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), image= finStimDir + 'PuzzlePieces.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3), size= (.23,.45), image= finStimDir + PlayerOnePuzzle)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;give pieces&quot;)&amp;#10;        scalePuzzleGive = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleGiveText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to give &quot;+ playerOneName+&quot; ?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleGiveText.draw()&amp;#10;        scalePuzzleGive.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        GiveScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = GiveScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;keep pieces&quot;)&amp;#10;        scalePuzzleKeep = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleKeepText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to keep?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleKeepText.draw()&amp;#10;        scalePuzzleKeep.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        KeepScaleChoice = ['left', 'up', 'right']&amp;#10;        responseKeepScale= event.waitKeys(keyList = KeepScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;elif questionType==3:&amp;#10;    #Nice&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Is &quot;+ playerOneName +&quot; nice or not nice?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), image= finStimDir + 'NiceNotNice.png' )&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3), size = (.23,.45),image= finStimDir + PlayerOne)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;nice&quot;)&amp;#10;        scaleNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NiceScale.png')&amp;#10;        scaleNiceText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;Is &quot;+ playerOneName +&quot; a little nice, nice, or really nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNiceText.draw()&amp;#10;        scaleNice.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        niceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = niceScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;not nice&quot;)&amp;#10;        scaleNotNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NotNiceScale.png')&amp;#10;        scaleNotNiceText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;Is &quot;+ playerOneName+&quot; a little not nice, not nice, or really not nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNotNiceText.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        notniceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = notniceScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;    #play&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot; + playerOneName + &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (.5, -.5), image= finStimDir + 'Play.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,0), size= (.23,.45),image= finStimDir + PlayerOne)&amp;#10;    optionThree = visual.ImageStim(myWindow, pos= (-.5, -.5), image= finStimDir + 'NoPlay.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    optionThree.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalePlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+playerOneName+&quot; let you play?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePlayText.draw()&amp;#10;        scalePlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        PlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = PlayScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalenoPlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalenoPlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+ playerOneName+&quot; not play with you?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalenoPlayText.draw()&amp;#10;        scalenoPlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        noPlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = noPlayScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;&amp;#10;    #help &amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot;+playerOneName+&quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces them or keep them?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), image= finStimDir + 'PuzzlePieces.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3),size= (.23,.45), image= finStimDir + PlayerOnePuzzle)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;give pieces&quot;)&amp;#10;        scalePuzzleGive = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleGiveText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to give &quot;+ playerOneName+&quot; ?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleGiveText.draw()&amp;#10;        scalePuzzleGive.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        GiveScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = GiveScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;keep pieces&quot;)&amp;#10;        scalePuzzleKeep = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleKeepText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to keep?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleKeepText.draw()&amp;#10;        scalePuzzleKeep.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        KeepScaleChoice = ['left', 'up', 'right']&amp;#10;        responseKeepScale= event.waitKeys(keyList = KeepScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;    #cooperate &amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;We are going to play another game. This game need two people. Do you want to work with &quot;+ playerOneName+ &quot; or someone else?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;&amp;#10;&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (.5, 0), image= finStimDir + PlayerOne)&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (-.5,0), image= finStimDir + 'work_together.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;&amp;#10;    if response == 'left':&amp;#10;        print(&quot;together&quot;)&amp;#10;&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;someone else&quot;)&amp;#10;&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;&amp;#10;    #MC&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Did &quot; + participantName + &quot; get to play or have to watch?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, 0), size = (.23,.45), image= finStimDir + Participant )&amp;#10;    chooseOne= visual.TextStim(myWindow, pos=(-.5, -.5), text= &quot;Play&quot;, wrapWidth=1.5, color='black')&amp;#10;    chooseTwo= visual.TextStim(myWindow, pos=(.5, -.5), text= &quot;Watch&quot;, wrapWidth=1.5, color='black')&amp;#10;    myBackground.draw()&amp;#10;    charText.draw()&amp;#10;    optionOne.draw()&amp;#10;    chooseOne.draw()&amp;#10;    chooseTwo.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;    else:&amp;#10;        print(&quot;watch&quot;)&amp;#10;elif questionType==4:&amp;#10;    #play &amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot; + playerOneName + &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (.5, -.5), image= finStimDir + 'Play.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,0),size= (.23,.45), image= finStimDir + PlayerOne)&amp;#10;    optionThree = visual.ImageStim(myWindow, pos= (-.5, -.5), image= finStimDir + 'NoPlay.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    optionThree.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalePlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+playerOneName+&quot; let you play?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePlayText.draw()&amp;#10;        scalePlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        PlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = PlayScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalenoPlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalenoPlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+ playerOneName+&quot; not play with you?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalenoPlayText.draw()&amp;#10;        scalenoPlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        noPlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = noPlayScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;&amp;#10;    #nice &amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Is &quot;+ playerOneName +&quot; nice or not nice?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), image= finStimDir + 'NiceNotNice.png' )&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3), size = (.23,.45),image= finStimDir + PlayerOne)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;nice&quot;)&amp;#10;        scaleNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NiceScale.png')&amp;#10;        scaleNiceText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;Is &quot;+ playerOneName +&quot; a little nice, nice, or really nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNiceText.draw()&amp;#10;        scaleNice.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        niceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = niceScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;not nice&quot;)&amp;#10;        scaleNotNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NotNiceScale.png')&amp;#10;        scaleNotNiceText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;Is &quot;+ playerOneName+&quot; a little not nice, not nice, or really not nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNotNiceText.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        notniceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = notniceScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;    #cooperate &amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;We are going to play another game. This game need two people. Do you want to work with &quot;+ playerOneName+ &quot; or someone else?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;&amp;#10;&amp;#10;    optionOne = visual.ImageStim(myWindow,size= (.23,.45), pos= (.5, 0), image= finStimDir + PlayerOne)&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (-.5,0), image= finStimDir + 'work_together.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;&amp;#10;    if response == 'left':&amp;#10;        print(&quot;together&quot;)&amp;#10;&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;someone else&quot;)&amp;#10;&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;&amp;#10;    #help &amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot;+playerOneName+&quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces to them or keep them?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), image= finStimDir + 'PuzzlePieces.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3), size= (.23,.45), image= finStimDir + PlayerOnePuzzle)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;give pieces&quot;)&amp;#10;        scalePuzzleGive = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleGiveText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to give &quot;+ playerOneName+&quot; ?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleGiveText.draw()&amp;#10;        scalePuzzleGive.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        GiveScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = GiveScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;keep pieces&quot;)&amp;#10;        scalePuzzleKeep = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleKeepText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to keep?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleKeepText.draw()&amp;#10;        scalePuzzleKeep.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        KeepScaleChoice = ['left', 'up', 'right']&amp;#10;        responseKeepScale= event.waitKeys(keyList = KeepScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;    #MC &amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Did &quot; + participantName + &quot; get to play or have to watch?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, 0), size = (.23,.45), image= finStimDir + Participant )&amp;#10;    chooseOne= visual.TextStim(myWindow, pos=(-.5, -.5), text= &quot;Play&quot;, wrapWidth=1.5, color='black')&amp;#10;    chooseTwo= visual.TextStim(myWindow, pos=(.5, -.5), text= &quot;Watch&quot;, wrapWidth=1.5, color='black')&amp;#10;    myBackground.draw()&amp;#10;    charText.draw()&amp;#10;    optionOne.draw()&amp;#10;    chooseOne.draw()&amp;#10;    chooseTwo.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;    else:&amp;#10;        print(&quot;watch&quot;)&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_8" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="introductions_game2">
      <CodeComponent name="code_4">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="myBackground.draw();&amp;#10;myWindow.flip();&amp;#10;storyText = new visual.TextStim(myWindow, {&quot;text&quot;: greeting, &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;keyControl = new visual.TextStim(myWindow, {&quot;text&quot;: &quot;Press Space to begin&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;, &quot;pos&quot;: [0, (- 0.7)]});&amp;#10;characterOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), 0.15], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOneTwo)});&amp;#10;characterTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.15], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + ParticipantTwo)});&amp;#10;characterThree = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, 0.15], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerTwoTwo)});&amp;#10;characterOneName = new visual.TextStim(myWindow, {&quot;text&quot;: playerOneNameTwo, &quot;pos&quot;: [(- 0.5), (- 0.2)], &quot;color&quot;: &quot;black&quot;});&amp;#10;characterTwoName = new visual.TextStim(myWindow, {&quot;text&quot;: participantNameTwo, &quot;pos&quot;: [0, (- 0.2)], &quot;color&quot;: &quot;black&quot;});&amp;#10;characterThreeName = new visual.TextStim(myWindow, {&quot;text&quot;: playerTwoNameTwo, &quot;pos&quot;: [0.5, (- 0.2)], &quot;color&quot;: &quot;black&quot;});&amp;#10;myBackground.draw();&amp;#10;storyText.draw();&amp;#10;keyControl.draw();&amp;#10;characterOne.draw();&amp;#10;characterTwo.draw();&amp;#10;characterThree.draw();&amp;#10;characterOneName.draw();&amp;#10;characterTwoName.draw();&amp;#10;characterThreeName.draw();&amp;#10;myWindow.flip();&amp;#10;introKeyChoices = [&quot;space&quot;];&amp;#10;introResponse = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: introKeyChoices})[0];&amp;#10;if ((gameType === &quot;play&quot;)) {&amp;#10;    gameInstr = new visual.TextStim(myWindow, {&quot;text&quot;: &quot;To throw the ball left, press the left arrow key. \n\n To throw the ball right, press the right arrow key \n\n Press space to begin.&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    myBackground.draw();&amp;#10;    gameInstr.draw();&amp;#10;    myWindow.flip();&amp;#10;    psychoJS.eventManager.waitKeys({&quot;keyList&quot;: &quot;space&quot;});&amp;#10;    myBackground.draw();&amp;#10;    myWindow.flip();&amp;#10;    loadText = new visual.TextStim(myWindow, {&quot;text&quot;: &quot;Loading...&quot;, &quot;pos&quot;: [0, 0], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    loadShape = new visual.Rect(myWindow, {&quot;size&quot;: [0.25, 0.25], &quot;pos&quot;: [(- 1), (- 0.2)], &quot;fillColor&quot;: &quot;aquamarine&quot;});&amp;#10;    move = 0;&amp;#10;    while ((move &lt; 80)) {&amp;#10;        loadShape.pos += [0.03, 0.0];&amp;#10;        myBackground.draw();&amp;#10;        loadText.draw();&amp;#10;        loadShape.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(0.05);&amp;#10;        move = (move + 1);&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((gameType === &quot;observe&quot;)) {&amp;#10;        loadText = new visual.TextStim(myWindow, {&quot;text&quot;: &quot;Loading...&quot;, &quot;pos&quot;: [0, 0], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        loadShape = new visual.Rect(myWindow, {&quot;size&quot;: [0.25, 0.25], &quot;pos&quot;: [(- 1), (- 0.2)], &quot;fillColor&quot;: &quot;aquamarine&quot;});&amp;#10;        move = 0;&amp;#10;        while ((move &lt; 80)) {&amp;#10;            loadShape.pos += [0.03, 0.0];&amp;#10;            myBackground.draw();&amp;#10;            loadText.draw();&amp;#10;            loadShape.draw();&amp;#10;            myWindow.flip();&amp;#10;            core.wait(0.05);&amp;#10;            move = (move + 1);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="myBackground.draw()&amp;#10;myWindow.flip()&amp;#10;&amp;#10;&amp;#10;storyText = visual.TextStim(myWindow, text = greeting, pos =(0, .7), wrapWidth= 1.5, color= 'black')&amp;#10;keyControl = visual.TextStim(myWindow, text = &quot;Press Space to begin&quot;, wrapWidth= 1.5, color= 'black', pos = (0, -.7))&amp;#10;&amp;#10;characterOne = visual.ImageStim(myWindow, pos= (-.5, .15),size= (.23,.45) ,image= finStimDir + PlayerOneTwo)&amp;#10;characterTwo = visual.ImageStim(myWindow, pos= (0, .15),size= (.23,.45) ,image= finStimDir +  ParticipantTwo)&amp;#10;characterThree= visual.ImageStim(myWindow, pos= (.5, .15),size= (.23,.45) ,image= finStimDir +  PlayerTwoTwo)&amp;#10;characterOneName = visual.TextStim(myWindow, text= playerOneNameTwo, pos= (-.5,-.2), color='black')&amp;#10;characterTwoName =visual.TextStim(myWindow, text= participantNameTwo, pos= (0,-.2), color='black')&amp;#10;characterThreeName = visual.TextStim(myWindow, text= playerTwoNameTwo, pos= (.5,-.2), color='black')&amp;#10;&amp;#10;&amp;#10;myBackground.draw()&amp;#10;storyText.draw()&amp;#10;keyControl.draw()&amp;#10;characterOne.draw()&amp;#10;characterTwo.draw()&amp;#10;characterThree.draw()&amp;#10;characterOneName.draw()&amp;#10;characterTwoName.draw()&amp;#10;characterThreeName.draw()&amp;#10;myWindow.flip()&amp;#10;&amp;#10;introKeyChoices= ['space'] &amp;#10;introResponse = event.waitKeys(keyList= introKeyChoices)[0]&amp;#10;&amp;#10;&amp;#10;if gameType== &quot;play&quot;:&amp;#10;    gameInstr = visual.TextStim(myWindow, text= &quot;To throw the ball left, press the left arrow key. \n\n To \&amp;#10;throw the ball right, press the right arrow key \n\n Press space to begin.&quot;, wrapWidth=1.5, color='black')&amp;#10;    myBackground.draw()&amp;#10;    gameInstr.draw()&amp;#10;    myWindow.flip()&amp;#10;    event.waitKeys(keyList='space')&amp;#10;&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;&amp;#10;    loadText = visual.TextStim(myWindow, text= &quot;Loading...&quot;, pos=(0,0), wrapWidth=1.5, color='black')&amp;#10;    loadShape = visual.Rect(myWindow, size=(0.25,0.25), pos= (-1,-0.2), fillColor= 'aquamarine')&amp;#10;&amp;#10;    move= 0&amp;#10;&amp;#10;    while move &lt; 80:&amp;#10;        loadShape.pos +=(0.03, 0.0)&amp;#10;        myBackground.draw()&amp;#10;        loadText.draw()&amp;#10;        loadShape.draw()&amp;#10;        myWindow.flip()&amp;#10;        core.wait(.05)&amp;#10;        move= move + 1&amp;#10;&amp;#10;elif gameType == &quot;observe&quot;:&amp;#10;    loadText = visual.TextStim(myWindow, text= &quot;Loading...&quot;, pos=(0,0), wrapWidth=1.5, color='black')&amp;#10;    loadShape = visual.Rect(myWindow, size=(0.25,0.25), pos= (-1,-0.2), fillColor= 'aquamarine')&amp;#10;&amp;#10;    move= 0&amp;#10;&amp;#10;    while move &lt; 80:&amp;#10;        loadShape.pos +=(0.03, 0.0)&amp;#10;        myBackground.draw()&amp;#10;        loadText.draw()&amp;#10;        loadShape.draw()&amp;#10;        myWindow.flip()&amp;#10;        core.wait(.05)&amp;#10;        move= move + 1" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="GameTwo">
      <CodeComponent name="code_5">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&amp;#10;ParticipantGame = visual.ImageStim(myWindow, pos= (0, -.5),size= (.23,.45), image= finStimDir+ ParticipantTwo)&amp;#10;PlayerOneGame = visual.ImageStim(myWindow, pos= (-.5,.5),size= (.23,.45), image= finStimDir+PlayerOneTwo)&amp;#10;PlayerTwoGame= visual.ImageStim(myWindow, pos= (.5,.5),size= (.23,.45), image= finStimDir+PlayerTwoTwo)&amp;#10;#warmup&amp;#10;myBackground.draw()&amp;#10;ParticipantGame.draw()&amp;#10;PlayerOneGame.draw()&amp;#10;PlayerTwoGame.draw()&amp;#10;ball.draw()&amp;#10;myWindow.flip()&amp;#10;&amp;#10;&amp;#10;if expCond == &quot;E&quot; or expCond == &quot;F&quot; or expCond== &quot;G&quot; or expCond==&quot;H&quot; or expCond ==&quot;M&quot; or expCond==&quot;N&quot; or expCond==&quot;O&quot; or expCond==&quot;P&quot;:&amp;#10;    gameType = &quot;play&quot;&amp;#10;    throwTo=event.waitKeys(keyList=throwResp)[0]&amp;#10;elif expCond == &quot;A&quot; or expCond == &quot;B&quot; or expCond== &quot;C&quot; or expCond==&quot;D&quot; or expCond ==&quot;I&quot; or expCond==&quot;J&quot; or expCond==&quot;K&quot; or expCond==&quot;L&quot;: &amp;#10;    gameType = &quot;observe&quot;&amp;#10;    throwTo= throwResp&amp;#10;&amp;#10;&amp;#10;if gameType == &quot;observe&quot;:&amp;#10;    for curPoint in part2Two:&amp;#10;        ball.setPos(curPoint)#throw 1&amp;#10;        myBackground.draw()&amp;#10;        PlayerOneGame.draw()&amp;#10;        PlayerTwoGame.draw()&amp;#10;        ParticipantGame.draw()&amp;#10;        ball.draw()&amp;#10;        myWindow.flip()&amp;#10;        core.wait(0.01)&amp;#10;        core.wait(0.5)&amp;#10;        numThrow += 1&amp;#10;#            throwball('playerTwo')&amp;#10;    for curPoint in two2One:&amp;#10;        ball.setPos(curPoint)#throw 2&amp;#10;        myBackground.draw()&amp;#10;        PlayerOneGame.draw()&amp;#10;        PlayerTwoGame.draw()&amp;#10;        ParticipantGame.draw()&amp;#10;        ball.draw()&amp;#10;        myWindow.flip()&amp;#10;        core.wait(0.01)&amp;#10;        core.wait(1.5)&amp;#10;        numThrow += 1&amp;#10;#            throwball('playerOne')&amp;#10;    for curPoint in one2Part:#throw 3&amp;#10;        ball.setPos(curPoint)&amp;#10;        myBackground.draw()&amp;#10;        PlayerOneGame.draw()&amp;#10;        PlayerTwoGame.draw()&amp;#10;        ParticipantGame.draw()&amp;#10;        ball.draw()&amp;#10;        myWindow.flip()&amp;#10;        core.wait(0.01)&amp;#10;        core.wait(.5)&amp;#10;        numThrow += 1&amp;#10;#               throwball (p1)&amp;#10;    for curPoint in part2One:#throw 4&amp;#10;        ball.setPos(curPoint)&amp;#10;        myBackground.draw()&amp;#10;        PlayerOneGame.draw()&amp;#10;        PlayerTwoGame.draw()&amp;#10;        ParticipantGame.draw()&amp;#10;        ball.draw()&amp;#10;        myWindow.flip()&amp;#10;        core.wait(0.01)&amp;#10;        core.wait(.5)&amp;#10;        numThrow += 1&amp;#10;#               throwball (p1)&amp;#10;    for curPoint in one2Two:#throw 5&amp;#10;        ball.setPos(curPoint)&amp;#10;        myBackground.draw()&amp;#10;        PlayerOneGame.draw()&amp;#10;        PlayerTwoGame.draw()&amp;#10;        ParticipantGame.draw()&amp;#10;        ball.draw()&amp;#10;        myWindow.flip()&amp;#10;        core.wait(0.01)&amp;#10;        core.wait(.5)&amp;#10;        numThrow += 1&amp;#10;elif gameType == &quot;play&quot;:&amp;#10;    while numThrow &lt; 5:&amp;#10;        if throwTo == 'right':&amp;#10;            for curPoint in part2Two: #throw_1r&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1&amp;#10;            for curPoint in two2One: #throw_2r&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1&amp;#10;            for curPoint in one2Part: #throw_3r&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(.5)&amp;#10;                numThrow += 1&amp;#10;        elif throwTo == 'left':&amp;#10;            for curPoint in part2One:#throw_1l&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;            myBackground.draw()&amp;#10;            PlayerOneGame.draw()&amp;#10;            PlayerTwoGame.draw()&amp;#10;            ParticipantGame.draw()&amp;#10;            myWindow.flip()&amp;#10;            core.wait(.01)&amp;#10;            core.wait(1.5)&amp;#10;            numThrow+=1&amp;#10;            for curPoint in one2Two: #throw_2l&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;            myBackground.draw()&amp;#10;            PlayerOneGame.draw()&amp;#10;            PlayerTwoGame.draw()&amp;#10;            ParticipantGame.draw()&amp;#10;            myWindow.flip()&amp;#10;            core.wait(.01)&amp;#10;            core.wait(1.5)&amp;#10;            numThrow += 1&amp;#10;            for curPoint in two2Part: #throw_3l&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(.5)&amp;#10;                numThrow += 1&amp;#10;        throwTo2 = event.waitKeys(keyList=keyResp)[0]&amp;#10;        if throwTo2 == 'right':&amp;#10;            for curPoint in part2Two: #throw_4r&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1&amp;#10;            for curPoint in two2One: #throw_5r&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1&amp;#10;        elif throwTo2 == 'left':&amp;#10;            for curPoint in part2One:#throw_1l&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow+=1&amp;#10;            for curPoint in one2Two: #throw_2l&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1&amp;#10;#Exclusion piece for observed and for play&amp;#10;    while numThrow &lt; 35:&amp;#10;        if throwTo2 == 'right':&amp;#10;            for curPoint in one2Two: &amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1&amp;#10;            for curPoint in two2One:&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1&amp;#10;        elif throwTo2 == 'left':&amp;#10;            for curPoint in two2One:&amp;#10;                    ball.setPos(curPoint)&amp;#10;                    myBackground.draw()&amp;#10;                    PlayerOneGame.draw()&amp;#10;                    PlayerTwoGame.draw()&amp;#10;                    ParticipantGame.draw()&amp;#10;                    ball.draw()&amp;#10;                    myWindow.flip()&amp;#10;                    core.wait(0.01)&amp;#10;                    core.wait(1.5)&amp;#10;                    numThrow += 1&amp;#10;            for curPoint in one2Two:&amp;#10;                ball.setPos(curPoint)&amp;#10;                myBackground.draw()&amp;#10;                PlayerOneGame.draw()&amp;#10;                PlayerTwoGame.draw()&amp;#10;                ParticipantGame.draw()&amp;#10;                ball.draw()&amp;#10;                myWindow.flip()&amp;#10;                core.wait(0.01)&amp;#10;                core.wait(0.5)&amp;#10;                numThrow += 1" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="ParticipantGame = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + ParticipantTwo)});&amp;#10;PlayerOneGame = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), 0.5], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOneTwo)});&amp;#10;PlayerTwoGame = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, 0.5], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerTwoTwo)});&amp;#10;myBackground.draw();&amp;#10;ParticipantGame.draw();&amp;#10;PlayerOneGame.draw();&amp;#10;PlayerTwoGame.draw();&amp;#10;ball.draw();&amp;#10;myWindow.flip();&amp;#10;if (((((((((expCond === &quot;E&quot;) || (expCond === &quot;F&quot;)) || (expCond === &quot;G&quot;)) || (expCond === &quot;H&quot;)) || (expCond === &quot;M&quot;)) || (expCond === &quot;N&quot;)) || (expCond === &quot;O&quot;)) || (expCond === &quot;P&quot;))) {&amp;#10;    gameType = &quot;play&quot;;&amp;#10;    throwTo = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: throwResp})[0];&amp;#10;} else {&amp;#10;    if (((((((((expCond === &quot;A&quot;) || (expCond === &quot;B&quot;)) || (expCond === &quot;C&quot;)) || (expCond === &quot;D&quot;)) || (expCond === &quot;I&quot;)) || (expCond === &quot;J&quot;)) || (expCond === &quot;K&quot;)) || (expCond === &quot;L&quot;))) {&amp;#10;        gameType = &quot;observe&quot;;&amp;#10;        throwTo = throwResp;&amp;#10;    }&amp;#10;}&amp;#10;if ((gameType === &quot;observe&quot;)) {&amp;#10;    for (var curPoint, _pj_c = 0, _pj_a = part2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        curPoint = _pj_a[_pj_c];&amp;#10;        ball.setPos(curPoint);&amp;#10;        myBackground.draw();&amp;#10;        PlayerOneGame.draw();&amp;#10;        PlayerTwoGame.draw();&amp;#10;        ParticipantGame.draw();&amp;#10;        ball.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(0.01);&amp;#10;        core.wait(0.5);&amp;#10;        numThrow += 1;&amp;#10;    }&amp;#10;    for (var curPoint, _pj_c = 0, _pj_a = two2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        curPoint = _pj_a[_pj_c];&amp;#10;        ball.setPos(curPoint);&amp;#10;        myBackground.draw();&amp;#10;        PlayerOneGame.draw();&amp;#10;        PlayerTwoGame.draw();&amp;#10;        ParticipantGame.draw();&amp;#10;        ball.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(0.01);&amp;#10;        core.wait(1.5);&amp;#10;        numThrow += 1;&amp;#10;    }&amp;#10;    for (var curPoint, _pj_c = 0, _pj_a = one2Part, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        curPoint = _pj_a[_pj_c];&amp;#10;        ball.setPos(curPoint);&amp;#10;        myBackground.draw();&amp;#10;        PlayerOneGame.draw();&amp;#10;        PlayerTwoGame.draw();&amp;#10;        ParticipantGame.draw();&amp;#10;        ball.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(0.01);&amp;#10;        core.wait(0.5);&amp;#10;        numThrow += 1;&amp;#10;    }&amp;#10;    for (var curPoint, _pj_c = 0, _pj_a = part2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        curPoint = _pj_a[_pj_c];&amp;#10;        ball.setPos(curPoint);&amp;#10;        myBackground.draw();&amp;#10;        PlayerOneGame.draw();&amp;#10;        PlayerTwoGame.draw();&amp;#10;        ParticipantGame.draw();&amp;#10;        ball.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(0.01);&amp;#10;        core.wait(0.5);&amp;#10;        numThrow += 1;&amp;#10;    }&amp;#10;    for (var curPoint, _pj_c = 0, _pj_a = one2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        curPoint = _pj_a[_pj_c];&amp;#10;        ball.setPos(curPoint);&amp;#10;        myBackground.draw();&amp;#10;        PlayerOneGame.draw();&amp;#10;        PlayerTwoGame.draw();&amp;#10;        ParticipantGame.draw();&amp;#10;        ball.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(0.01);&amp;#10;        core.wait(0.5);&amp;#10;        numThrow += 1;&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((gameType === &quot;play&quot;)) {&amp;#10;        while ((numThrow &lt; 5)) {&amp;#10;            if ((throwTo === &quot;right&quot;)) {&amp;#10;                for (var curPoint, _pj_c = 0, _pj_a = part2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    curPoint = _pj_a[_pj_c];&amp;#10;                    ball.setPos(curPoint);&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    ball.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                }&amp;#10;                for (var curPoint, _pj_c = 0, _pj_a = two2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    curPoint = _pj_a[_pj_c];&amp;#10;                    ball.setPos(curPoint);&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    ball.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                }&amp;#10;                for (var curPoint, _pj_c = 0, _pj_a = one2Part, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    curPoint = _pj_a[_pj_c];&amp;#10;                    ball.setPos(curPoint);&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    ball.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((throwTo === &quot;left&quot;)) {&amp;#10;                    for (var curPoint, _pj_c = 0, _pj_a = part2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        curPoint = _pj_a[_pj_c];&amp;#10;                        ball.setPos(curPoint);&amp;#10;                        myBackground.draw();&amp;#10;                        PlayerOneGame.draw();&amp;#10;                        PlayerTwoGame.draw();&amp;#10;                        ParticipantGame.draw();&amp;#10;                        ball.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        core.wait(0.01);&amp;#10;                    }&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(1.5);&amp;#10;                    numThrow += 1;&amp;#10;                    for (var curPoint, _pj_c = 0, _pj_a = one2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        curPoint = _pj_a[_pj_c];&amp;#10;                        ball.setPos(curPoint);&amp;#10;                        myBackground.draw();&amp;#10;                        PlayerOneGame.draw();&amp;#10;                        PlayerTwoGame.draw();&amp;#10;                        ParticipantGame.draw();&amp;#10;                        ball.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        core.wait(0.01);&amp;#10;                    }&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(1.5);&amp;#10;                    numThrow += 1;&amp;#10;                    for (var curPoint, _pj_c = 0, _pj_a = two2Part, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        curPoint = _pj_a[_pj_c];&amp;#10;                        ball.setPos(curPoint);&amp;#10;                        myBackground.draw();&amp;#10;                        PlayerOneGame.draw();&amp;#10;                        PlayerTwoGame.draw();&amp;#10;                        ParticipantGame.draw();&amp;#10;                        ball.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        core.wait(0.01);&amp;#10;                        core.wait(0.5);&amp;#10;                        numThrow += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throwTo2 = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: keyResp})[0];&amp;#10;            if ((throwTo2 === &quot;right&quot;)) {&amp;#10;                for (var curPoint, _pj_c = 0, _pj_a = part2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    curPoint = _pj_a[_pj_c];&amp;#10;                    ball.setPos(curPoint);&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    ball.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                }&amp;#10;                for (var curPoint, _pj_c = 0, _pj_a = two2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    curPoint = _pj_a[_pj_c];&amp;#10;                    ball.setPos(curPoint);&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    ball.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((throwTo2 === &quot;left&quot;)) {&amp;#10;                    for (var curPoint, _pj_c = 0, _pj_a = part2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        curPoint = _pj_a[_pj_c];&amp;#10;                        ball.setPos(curPoint);&amp;#10;                        myBackground.draw();&amp;#10;                        PlayerOneGame.draw();&amp;#10;                        PlayerTwoGame.draw();&amp;#10;                        ParticipantGame.draw();&amp;#10;                        ball.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        core.wait(0.01);&amp;#10;                        core.wait(0.5);&amp;#10;                        numThrow += 1;&amp;#10;                    }&amp;#10;                    for (var curPoint, _pj_c = 0, _pj_a = one2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        curPoint = _pj_a[_pj_c];&amp;#10;                        ball.setPos(curPoint);&amp;#10;                        myBackground.draw();&amp;#10;                        PlayerOneGame.draw();&amp;#10;                        PlayerTwoGame.draw();&amp;#10;                        ParticipantGame.draw();&amp;#10;                        ball.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        core.wait(0.01);&amp;#10;                        core.wait(0.5);&amp;#10;                        numThrow += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        while ((numThrow &lt; 35)) {&amp;#10;            if ((throwTo2 === &quot;right&quot;)) {&amp;#10;                for (var curPoint, _pj_c = 0, _pj_a = one2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    curPoint = _pj_a[_pj_c];&amp;#10;                    ball.setPos(curPoint);&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    ball.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                }&amp;#10;                for (var curPoint, _pj_c = 0, _pj_a = two2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    curPoint = _pj_a[_pj_c];&amp;#10;                    ball.setPos(curPoint);&amp;#10;                    myBackground.draw();&amp;#10;                    PlayerOneGame.draw();&amp;#10;                    PlayerTwoGame.draw();&amp;#10;                    ParticipantGame.draw();&amp;#10;                    ball.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    core.wait(0.01);&amp;#10;                    core.wait(0.5);&amp;#10;                    numThrow += 1;&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((throwTo2 === &quot;left&quot;)) {&amp;#10;                    for (var curPoint, _pj_c = 0, _pj_a = two2One, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        curPoint = _pj_a[_pj_c];&amp;#10;                        ball.setPos(curPoint);&amp;#10;                        myBackground.draw();&amp;#10;                        PlayerOneGame.draw();&amp;#10;                        PlayerTwoGame.draw();&amp;#10;                        ParticipantGame.draw();&amp;#10;                        ball.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        core.wait(0.01);&amp;#10;                        core.wait(1.5);&amp;#10;                        numThrow += 1;&amp;#10;                    }&amp;#10;                    for (var curPoint, _pj_c = 0, _pj_a = one2Two, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        curPoint = _pj_a[_pj_c];&amp;#10;                        ball.setPos(curPoint);&amp;#10;                        myBackground.draw();&amp;#10;                        PlayerOneGame.draw();&amp;#10;                        PlayerTwoGame.draw();&amp;#10;                        ParticipantGame.draw();&amp;#10;                        ball.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        core.wait(0.01);&amp;#10;                        core.wait(0.5);&amp;#10;                        numThrow += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_5" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="questions2">
      <CodeComponent name="code_6">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((questionType === 1)) {&amp;#10;    charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Did &quot; + participantNameTwo) + &quot; get to play or have to watch?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + ParticipantTwo)});&amp;#10;    chooseOne = new visual.TextStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;text&quot;: &quot;Play&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    chooseTwo = new visual.TextStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;text&quot;: &quot;Watch&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    myBackground.draw();&amp;#10;    charText.draw();&amp;#10;    optionOne.draw();&amp;#10;    chooseOne.draw();&amp;#10;    chooseTwo.draw();&amp;#10;    myWindow.flip();&amp;#10;    choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;    response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;    if ((response === &quot;left&quot;)) {&amp;#10;        console.log(&quot;play&quot;);&amp;#10;    } else {&amp;#10;        console.log(&quot;watch&quot;);&amp;#10;    }&amp;#10;    charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Is &quot; + playerOneNameTwo) + &quot; nice or not nice?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;size&quot;: [0.5, 0.5], &quot;image&quot;: (finStimDir + &quot;NiceNotNice.png&quot;)});&amp;#10;    optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOneTwo)});&amp;#10;    myBackground.draw();&amp;#10;    optionOne.draw();&amp;#10;    optionTwo.draw();&amp;#10;    charText.draw();&amp;#10;    myWindow.flip();&amp;#10;    choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;    response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;    if ((response === &quot;left&quot;)) {&amp;#10;        console.log(&quot;nice&quot;);&amp;#10;        scaleNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NiceScale.png&quot;)});&amp;#10;        scaleNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.7], &quot;text&quot;: ((&quot;Is &quot; + playerOneNameTwo) + &quot; a little nice, nice, or really nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        myBackground.draw();&amp;#10;        scaleNiceText.draw();&amp;#10;        scaleNice.draw();&amp;#10;        optionTwo.draw();&amp;#10;        myWindow.flip();&amp;#10;        niceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;        responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: niceScaleChoice})[0];&amp;#10;    } else {&amp;#10;        if ((response === &quot;right&quot;)) {&amp;#10;            console.log(&quot;not nice&quot;);&amp;#10;            scaleNotNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NotNiceScale.png&quot;)});&amp;#10;            scaleNotNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.7], &quot;text&quot;: ((&quot;Is &quot; + playerOneNameTwo) + &quot; a little not nice, not nice, or really not nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            myBackground.draw();&amp;#10;            scaleNotNiceText.draw();&amp;#10;            scaleNotNice.draw();&amp;#10;            optionTwo.draw();&amp;#10;            myWindow.flip();&amp;#10;            notniceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;            responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: notniceScaleChoice})[0];&amp;#10;        } else {&amp;#10;            console.log(&quot;whoops! does not work&quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    myBackground.draw();&amp;#10;    myWindow.flip();&amp;#10;    core.wait(1);&amp;#10;    myBackground.draw();&amp;#10;    myWindow.flip();&amp;#10;    charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneNameTwo) + &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;size&quot;: [0.5, 0.5], &quot;image&quot;: (finStimDir + &quot;Play.png&quot;)});&amp;#10;    optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOneTwo)});&amp;#10;    optionThree = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;size&quot;: [0.5, 0.5], &quot;image&quot;: (finStimDir + &quot;NoPlay.png&quot;)});&amp;#10;    myBackground.draw();&amp;#10;    optionOne.draw();&amp;#10;    optionTwo.draw();&amp;#10;    optionThree.draw();&amp;#10;    charText.draw();&amp;#10;    myWindow.flip();&amp;#10;    choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;    response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;    if ((response === &quot;left&quot;)) {&amp;#10;        console.log(&quot;play&quot;);&amp;#10;        scalePlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        scalePlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneNameTwo) + &quot; let you play?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        myBackground.draw();&amp;#10;        scalePlayText.draw();&amp;#10;        scalePlay.draw();&amp;#10;        optionTwo.draw();&amp;#10;        myWindow.flip();&amp;#10;        PlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;        responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: PlayScaleChoice})[0];&amp;#10;    } else {&amp;#10;        if ((response === &quot;right&quot;)) {&amp;#10;            console.log(&quot;play&quot;);&amp;#10;            scalenoPlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            scalenoPlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneNameTwo) + &quot; not play with you?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            myBackground.draw();&amp;#10;            scalenoPlayText.draw();&amp;#10;            scalenoPlay.draw();&amp;#10;            optionTwo.draw();&amp;#10;            myWindow.flip();&amp;#10;            noPlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;            responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: noPlayScaleChoice})[0];&amp;#10;        } else {&amp;#10;            console.log(&quot;whoops! does not work&quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    myBackground.draw();&amp;#10;    myWindow.flip();&amp;#10;    core.wait(1);&amp;#10;    myBackground.draw();&amp;#10;    myWindow.flip();&amp;#10;    charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneNameTwo) + &quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces to them or keep them?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;size&quot;: [0.5, 0.5], &quot;image&quot;: (finStimDir + &quot;PuzzlePieces.png&quot;)});&amp;#10;    optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOnePuzzleTwo)});&amp;#10;    myBackground.draw();&amp;#10;    optionOne.draw();&amp;#10;    optionTwo.draw();&amp;#10;    charText.draw();&amp;#10;    myWindow.flip();&amp;#10;    choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;    response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;    if ((response === &quot;left&quot;)) {&amp;#10;        console.log(&quot;give pieces&quot;);&amp;#10;        scalePuzzleGive = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        scalePuzzleGiveText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How many pieces do you want to give &quot; + playerOneNameTwo) + &quot; ?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        myBackground.draw();&amp;#10;        scalePuzzleGiveText.draw();&amp;#10;        scalePuzzleGive.draw();&amp;#10;        optionTwo.draw();&amp;#10;        myWindow.flip();&amp;#10;        GiveScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;        responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: GiveScaleChoice})[0];&amp;#10;    } else {&amp;#10;        if ((response === &quot;right&quot;)) {&amp;#10;            console.log(&quot;keep pieces&quot;);&amp;#10;            scalePuzzleKeep = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            scalePuzzleKeepText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: &quot;How many pieces do you want to keep?&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            myBackground.draw();&amp;#10;            scalePuzzleKeepText.draw();&amp;#10;            scalePuzzleKeep.draw();&amp;#10;            optionTwo.draw();&amp;#10;            myWindow.flip();&amp;#10;            KeepScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;            responseKeepScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: KeepScaleChoice})[0];&amp;#10;        } else {&amp;#10;            console.log(&quot;whoops! does not work&quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    myBackground.draw();&amp;#10;    myWindow.flip();&amp;#10;    core.wait(1);&amp;#10;    myBackground.draw();&amp;#10;    myWindow.flip();&amp;#10;    charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;We are going to play another game. This game need two people. Do you want to work with &quot; + playerOneNameTwo) + &quot; or someone else?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;    optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOneTwo)});&amp;#10;    optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), 0], &quot;image&quot;: (finStimDir + &quot;work_together.png&quot;)});&amp;#10;    myBackground.draw();&amp;#10;    optionOne.draw();&amp;#10;    optionTwo.draw();&amp;#10;    charText.draw();&amp;#10;    myWindow.flip();&amp;#10;    choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;    response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;    if ((response === &quot;left&quot;)) {&amp;#10;        console.log(&quot;together&quot;);&amp;#10;    } else {&amp;#10;        if ((response === &quot;right&quot;)) {&amp;#10;            console.log(&quot;someone else&quot;);&amp;#10;        } else {&amp;#10;            console.log(&quot;whoops! does not work&quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    myBackground.draw();&amp;#10;    myWindow.flip();&amp;#10;    core.wait(1);&amp;#10;} else {&amp;#10;    if ((questionType === 2)) {&amp;#10;        charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Did &quot; + participantNameTwo) + &quot; get to play or have to watch?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + ParticipantTwo)});&amp;#10;        chooseOne = new visual.TextStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;text&quot;: &quot;Play&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        chooseTwo = new visual.TextStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;text&quot;: &quot;Watch&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        myBackground.draw();&amp;#10;        charText.draw();&amp;#10;        optionOne.draw();&amp;#10;        chooseOne.draw();&amp;#10;        chooseTwo.draw();&amp;#10;        myWindow.flip();&amp;#10;        choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;        response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;        if ((response === &quot;left&quot;)) {&amp;#10;            console.log(&quot;play&quot;);&amp;#10;        } else {&amp;#10;            console.log(&quot;watch&quot;);&amp;#10;        }&amp;#10;        myBackground.draw();&amp;#10;        myWindow.flip();&amp;#10;        charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneNameTwo) + &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;Play.png&quot;)});&amp;#10;        optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOneTwo)});&amp;#10;        optionThree = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NoPlay.png&quot;)});&amp;#10;        myBackground.draw();&amp;#10;        optionOne.draw();&amp;#10;        optionTwo.draw();&amp;#10;        optionThree.draw();&amp;#10;        charText.draw();&amp;#10;        myWindow.flip();&amp;#10;        choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;        response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;        if ((response === &quot;left&quot;)) {&amp;#10;            console.log(&quot;play&quot;);&amp;#10;            scalePlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            scalePlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneNameTwo) + &quot; let you play?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            myBackground.draw();&amp;#10;            scalePlayText.draw();&amp;#10;            scalePlay.draw();&amp;#10;            optionTwo.draw();&amp;#10;            myWindow.flip();&amp;#10;            PlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;            responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: PlayScaleChoice})[0];&amp;#10;        } else {&amp;#10;            if ((response === &quot;right&quot;)) {&amp;#10;                console.log(&quot;play&quot;);&amp;#10;                scalenoPlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                scalenoPlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneNameTwo) + &quot; not play with you?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                myBackground.draw();&amp;#10;                scalenoPlayText.draw();&amp;#10;                scalenoPlay.draw();&amp;#10;                optionTwo.draw();&amp;#10;                myWindow.flip();&amp;#10;                noPlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: noPlayScaleChoice})[0];&amp;#10;            } else {&amp;#10;                console.log(&quot;whoops! does not work&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;        myBackground.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(1);&amp;#10;        charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Is &quot; + playerOneNameTwo) + &quot; nice or not nice?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NiceNotNice.png&quot;)});&amp;#10;        optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOneTwo)});&amp;#10;        myBackground.draw();&amp;#10;        optionOne.draw();&amp;#10;        optionTwo.draw();&amp;#10;        charText.draw();&amp;#10;        myWindow.flip();&amp;#10;        choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;        response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;        if ((response === &quot;left&quot;)) {&amp;#10;            console.log(&quot;nice&quot;);&amp;#10;            scaleNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NiceScale.png&quot;)});&amp;#10;            scaleNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;Is &quot; + playerOneNameTwo) + &quot; a little nice, nice, or really nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            myBackground.draw();&amp;#10;            scaleNiceText.draw();&amp;#10;            scaleNice.draw();&amp;#10;            optionTwo.draw();&amp;#10;            myWindow.flip();&amp;#10;            niceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;            responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: niceScaleChoice})[0];&amp;#10;        } else {&amp;#10;            if ((response === &quot;right&quot;)) {&amp;#10;                console.log(&quot;not nice&quot;);&amp;#10;                scaleNotNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NotNiceScale.png&quot;)});&amp;#10;                scaleNotNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;Is &quot; + playerOneNameTwo) + &quot; a little not nice, not nice, or really not nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                myBackground.draw();&amp;#10;                scaleNotNiceText.draw();&amp;#10;                optionTwo.draw();&amp;#10;                myWindow.flip();&amp;#10;                notniceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: notniceScaleChoice})[0];&amp;#10;            } else {&amp;#10;                console.log(&quot;whoops! does not work&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;        myBackground.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(1);&amp;#10;        myBackground.draw();&amp;#10;        myWindow.flip();&amp;#10;        charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;We are going to play another game. This game need two people. Do you want to work with &quot; + playerOneNameTwo) + &quot; or someone else?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOneTwo)});&amp;#10;        optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), 0], &quot;image&quot;: (finStimDir + &quot;work_together.png&quot;)});&amp;#10;        myBackground.draw();&amp;#10;        optionOne.draw();&amp;#10;        optionTwo.draw();&amp;#10;        charText.draw();&amp;#10;        myWindow.flip();&amp;#10;        choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;        response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;        if ((response === &quot;left&quot;)) {&amp;#10;            console.log(&quot;together&quot;);&amp;#10;        } else {&amp;#10;            if ((response === &quot;right&quot;)) {&amp;#10;                console.log(&quot;someone else&quot;);&amp;#10;            } else {&amp;#10;                console.log(&quot;whoops! does not work&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;        myBackground.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(1);&amp;#10;        myBackground.draw();&amp;#10;        myWindow.flip();&amp;#10;        charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneNameTwo) + &quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces to them  or keep them?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;        optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;PuzzlePieces.png&quot;)});&amp;#10;        optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOnePuzzleTwo)});&amp;#10;        myBackground.draw();&amp;#10;        optionOne.draw();&amp;#10;        optionTwo.draw();&amp;#10;        charText.draw();&amp;#10;        myWindow.flip();&amp;#10;        choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;        response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;        if ((response === &quot;left&quot;)) {&amp;#10;            console.log(&quot;give pieces&quot;);&amp;#10;            scalePuzzleGive = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            scalePuzzleGiveText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How many pieces do you want to give &quot; + playerOneNameTwo) + &quot; ?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            myBackground.draw();&amp;#10;            scalePuzzleGiveText.draw();&amp;#10;            scalePuzzleGive.draw();&amp;#10;            optionTwo.draw();&amp;#10;            myWindow.flip();&amp;#10;            GiveScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;            responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: GiveScaleChoice})[0];&amp;#10;        } else {&amp;#10;            if ((response === &quot;right&quot;)) {&amp;#10;                console.log(&quot;keep pieces&quot;);&amp;#10;                scalePuzzleKeep = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                scalePuzzleKeepText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: &quot;How many pieces do you want to keep?&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                myBackground.draw();&amp;#10;                scalePuzzleKeepText.draw();&amp;#10;                scalePuzzleKeep.draw();&amp;#10;                optionTwo.draw();&amp;#10;                myWindow.flip();&amp;#10;                KeepScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                responseKeepScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: KeepScaleChoice})[0];&amp;#10;            } else {&amp;#10;                console.log(&quot;whoops! does not work&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;        myBackground.draw();&amp;#10;        myWindow.flip();&amp;#10;        core.wait(1);&amp;#10;    } else {&amp;#10;        if ((questionType === 3)) {&amp;#10;            charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Is &quot; + playerOneNameTwo) + &quot; nice or not nice?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NiceNotNice.png&quot;)});&amp;#10;            optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOneTwo)});&amp;#10;            myBackground.draw();&amp;#10;            optionOne.draw();&amp;#10;            optionTwo.draw();&amp;#10;            charText.draw();&amp;#10;            myWindow.flip();&amp;#10;            choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;            response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;            if ((response === &quot;left&quot;)) {&amp;#10;                console.log(&quot;nice&quot;);&amp;#10;                scaleNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NiceScale.png&quot;)});&amp;#10;                scaleNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;Is &quot; + playerOneNameTwo) + &quot; a little nice, nice, or really nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                myBackground.draw();&amp;#10;                scaleNiceText.draw();&amp;#10;                scaleNice.draw();&amp;#10;                optionTwo.draw();&amp;#10;                myWindow.flip();&amp;#10;                niceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: niceScaleChoice})[0];&amp;#10;            } else {&amp;#10;                if ((response === &quot;right&quot;)) {&amp;#10;                    console.log(&quot;not nice&quot;);&amp;#10;                    scaleNotNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NotNiceScale.png&quot;)});&amp;#10;                    scaleNotNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;Is &quot; + playerOneNameTwo) + &quot; a little not nice, not nice, or really not nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    myBackground.draw();&amp;#10;                    scaleNotNiceText.draw();&amp;#10;                    optionTwo.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    notniceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                    responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: notniceScaleChoice})[0];&amp;#10;                } else {&amp;#10;                    console.log(&quot;whoops! does not work&quot;);&amp;#10;                }&amp;#10;            }&amp;#10;            myBackground.draw();&amp;#10;            myWindow.flip();&amp;#10;            core.wait(1);&amp;#10;            myBackground.draw();&amp;#10;            myWindow.flip();&amp;#10;            charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneNameTwo) + &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;Play.png&quot;)});&amp;#10;            optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOneTwo)});&amp;#10;            optionThree = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NoPlay.png&quot;)});&amp;#10;            myBackground.draw();&amp;#10;            optionOne.draw();&amp;#10;            optionTwo.draw();&amp;#10;            optionThree.draw();&amp;#10;            charText.draw();&amp;#10;            myWindow.flip();&amp;#10;            choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;            response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;            if ((response === &quot;left&quot;)) {&amp;#10;                console.log(&quot;play&quot;);&amp;#10;                scalePlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                scalePlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneNameTwo) + &quot; let you play?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                myBackground.draw();&amp;#10;                scalePlayText.draw();&amp;#10;                scalePlay.draw();&amp;#10;                optionTwo.draw();&amp;#10;                myWindow.flip();&amp;#10;                PlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: PlayScaleChoice})[0];&amp;#10;            } else {&amp;#10;                if ((response === &quot;right&quot;)) {&amp;#10;                    console.log(&quot;play&quot;);&amp;#10;                    scalenoPlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    scalenoPlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneNameTwo) + &quot; not play with you?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    myBackground.draw();&amp;#10;                    scalenoPlayText.draw();&amp;#10;                    scalenoPlay.draw();&amp;#10;                    optionTwo.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    noPlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                    responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: noPlayScaleChoice})[0];&amp;#10;                } else {&amp;#10;                    console.log(&quot;whoops! does not work&quot;);&amp;#10;                }&amp;#10;            }&amp;#10;            myBackground.draw();&amp;#10;            myWindow.flip();&amp;#10;            core.wait(1);&amp;#10;            myBackground.draw();&amp;#10;            myWindow.flip();&amp;#10;            charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneNameTwo) + &quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces them or keep them?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;PuzzlePieces.png&quot;)});&amp;#10;            optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOnePuzzleTwo)});&amp;#10;            myBackground.draw();&amp;#10;            optionOne.draw();&amp;#10;            optionTwo.draw();&amp;#10;            charText.draw();&amp;#10;            myWindow.flip();&amp;#10;            choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;            response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;            if ((response === &quot;left&quot;)) {&amp;#10;                console.log(&quot;give pieces&quot;);&amp;#10;                scalePuzzleGive = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                scalePuzzleGiveText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How many pieces do you want to give &quot; + playerOneNameTwo) + &quot; ?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                myBackground.draw();&amp;#10;                scalePuzzleGiveText.draw();&amp;#10;                scalePuzzleGive.draw();&amp;#10;                optionTwo.draw();&amp;#10;                myWindow.flip();&amp;#10;                GiveScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: GiveScaleChoice})[0];&amp;#10;            } else {&amp;#10;                if ((response === &quot;right&quot;)) {&amp;#10;                    console.log(&quot;keep pieces&quot;);&amp;#10;                    scalePuzzleKeep = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    scalePuzzleKeepText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: &quot;How many pieces do you want to keep?&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    myBackground.draw();&amp;#10;                    scalePuzzleKeepText.draw();&amp;#10;                    scalePuzzleKeep.draw();&amp;#10;                    optionTwo.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    KeepScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                    responseKeepScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: KeepScaleChoice})[0];&amp;#10;                } else {&amp;#10;                    console.log(&quot;whoops! does not work&quot;);&amp;#10;                }&amp;#10;            }&amp;#10;            myBackground.draw();&amp;#10;            myWindow.flip();&amp;#10;            core.wait(1);&amp;#10;            myBackground.draw();&amp;#10;            myWindow.flip();&amp;#10;            charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;We are going to play another game. This game need two people. Do you want to work with &quot; + playerOneNameTwo) + &quot; or someone else?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, 0], &quot;image&quot;: (finStimDir + PlayerOneTwo)});&amp;#10;            optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), 0], &quot;image&quot;: (finStimDir + &quot;work_together.png&quot;)});&amp;#10;            myBackground.draw();&amp;#10;            optionOne.draw();&amp;#10;            optionTwo.draw();&amp;#10;            charText.draw();&amp;#10;            myWindow.flip();&amp;#10;            choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;            response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;            if ((response === &quot;left&quot;)) {&amp;#10;                console.log(&quot;together&quot;);&amp;#10;            } else {&amp;#10;                if ((response === &quot;right&quot;)) {&amp;#10;                    console.log(&quot;someone else&quot;);&amp;#10;                } else {&amp;#10;                    console.log(&quot;whoops! does not work&quot;);&amp;#10;                }&amp;#10;            }&amp;#10;            myBackground.draw();&amp;#10;            myWindow.flip();&amp;#10;            core.wait(1);&amp;#10;            charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Did &quot; + participantNameTwo) + &quot; get to play or have to watch?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + ParticipantTwo)});&amp;#10;            chooseOne = new visual.TextStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;text&quot;: &quot;Play&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            chooseTwo = new visual.TextStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;text&quot;: &quot;Watch&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;            myBackground.draw();&amp;#10;            charText.draw();&amp;#10;            optionOne.draw();&amp;#10;            chooseOne.draw();&amp;#10;            chooseTwo.draw();&amp;#10;            myWindow.flip();&amp;#10;            choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;            response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;            if ((response === &quot;left&quot;)) {&amp;#10;                console.log(&quot;play&quot;);&amp;#10;            } else {&amp;#10;                console.log(&quot;watch&quot;);&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((questionType === 4)) {&amp;#10;                myBackground.draw();&amp;#10;                myWindow.flip();&amp;#10;                charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneNameTwo) + &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;Play.png&quot;)});&amp;#10;                optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOneTwo)});&amp;#10;                optionThree = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NoPlay.png&quot;)});&amp;#10;                myBackground.draw();&amp;#10;                optionOne.draw();&amp;#10;                optionTwo.draw();&amp;#10;                optionThree.draw();&amp;#10;                charText.draw();&amp;#10;                myWindow.flip();&amp;#10;                choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;                response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;                if ((response === &quot;left&quot;)) {&amp;#10;                    console.log(&quot;play&quot;);&amp;#10;                    scalePlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    scalePlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneNameTwo) + &quot; let you play?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    myBackground.draw();&amp;#10;                    scalePlayText.draw();&amp;#10;                    scalePlay.draw();&amp;#10;                    optionTwo.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    PlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                    responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: PlayScaleChoice})[0];&amp;#10;                } else {&amp;#10;                    if ((response === &quot;right&quot;)) {&amp;#10;                        console.log(&quot;play&quot;);&amp;#10;                        scalenoPlay = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;a little bit              regular amount                a lot&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                        scalenoPlayText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How much will &quot; + playerOneNameTwo) + &quot; not play with you?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                        myBackground.draw();&amp;#10;                        scalenoPlayText.draw();&amp;#10;                        scalenoPlay.draw();&amp;#10;                        optionTwo.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        noPlayScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                        responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: noPlayScaleChoice})[0];&amp;#10;                    } else {&amp;#10;                        console.log(&quot;whoops! does not work&quot;);&amp;#10;                    }&amp;#10;                }&amp;#10;                myBackground.draw();&amp;#10;                myWindow.flip();&amp;#10;                core.wait(1);&amp;#10;                charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Is &quot; + playerOneNameTwo) + &quot; nice or not nice?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NiceNotNice.png&quot;)});&amp;#10;                optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOneTwo)});&amp;#10;                myBackground.draw();&amp;#10;                optionOne.draw();&amp;#10;                optionTwo.draw();&amp;#10;                charText.draw();&amp;#10;                myWindow.flip();&amp;#10;                choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;                response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;                if ((response === &quot;left&quot;)) {&amp;#10;                    console.log(&quot;nice&quot;);&amp;#10;                    scaleNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NiceScale.png&quot;)});&amp;#10;                    scaleNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;Is &quot; + playerOneNameTwo) + &quot; a little nice, nice, or really nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    myBackground.draw();&amp;#10;                    scaleNiceText.draw();&amp;#10;                    scaleNice.draw();&amp;#10;                    optionTwo.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    niceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                    responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: niceScaleChoice})[0];&amp;#10;                } else {&amp;#10;                    if ((response === &quot;right&quot;)) {&amp;#10;                        console.log(&quot;not nice&quot;);&amp;#10;                        scaleNotNice = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;NotNiceScale.png&quot;)});&amp;#10;                        scaleNotNiceText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;Is &quot; + playerOneNameTwo) + &quot; a little not nice, not nice, or really not nice?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                        myBackground.draw();&amp;#10;                        scaleNotNiceText.draw();&amp;#10;                        optionTwo.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        notniceScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                        responseNiceScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: notniceScaleChoice})[0];&amp;#10;                    } else {&amp;#10;                        console.log(&quot;whoops! does not work&quot;);&amp;#10;                    }&amp;#10;                }&amp;#10;                myBackground.draw();&amp;#10;                myWindow.flip();&amp;#10;                core.wait(1);&amp;#10;                myBackground.draw();&amp;#10;                myWindow.flip();&amp;#10;                charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;We are going to play another game. This game need two people. Do you want to work with &quot; + playerOneNameTwo) + &quot; or someone else?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                optionOne = new visual.ImageStim(myWindow, {&quot;size&quot;: [0.23, 0.45], &quot;pos&quot;: [0.5, 0], &quot;image&quot;: (finStimDir + PlayerOneTwo)});&amp;#10;                optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [(- 0.5), 0], &quot;image&quot;: (finStimDir + &quot;work_together.png&quot;)});&amp;#10;                myBackground.draw();&amp;#10;                optionOne.draw();&amp;#10;                optionTwo.draw();&amp;#10;                charText.draw();&amp;#10;                myWindow.flip();&amp;#10;                choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;                response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;                if ((response === &quot;left&quot;)) {&amp;#10;                    console.log(&quot;together&quot;);&amp;#10;                } else {&amp;#10;                    if ((response === &quot;right&quot;)) {&amp;#10;                        console.log(&quot;someone else&quot;);&amp;#10;                    } else {&amp;#10;                        console.log(&quot;whoops! does not work&quot;);&amp;#10;                    }&amp;#10;                }&amp;#10;                myBackground.draw();&amp;#10;                myWindow.flip();&amp;#10;                core.wait(1);&amp;#10;                myBackground.draw();&amp;#10;                myWindow.flip();&amp;#10;                charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Oh look! &quot; + playerOneNameTwo) + &quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces to them or keep them?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;image&quot;: (finStimDir + &quot;PuzzlePieces.png&quot;)});&amp;#10;                optionTwo = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0.3], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + PlayerOnePuzzleTwo)});&amp;#10;                myBackground.draw();&amp;#10;                optionOne.draw();&amp;#10;                optionTwo.draw();&amp;#10;                charText.draw();&amp;#10;                myWindow.flip();&amp;#10;                choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;                response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;                if ((response === &quot;left&quot;)) {&amp;#10;                    console.log(&quot;give pieces&quot;);&amp;#10;                    scalePuzzleGive = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    scalePuzzleGiveText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: ((&quot;How many pieces do you want to give &quot; + playerOneNameTwo) + &quot; ?&quot;), &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                    myBackground.draw();&amp;#10;                    scalePuzzleGiveText.draw();&amp;#10;                    scalePuzzleGive.draw();&amp;#10;                    optionTwo.draw();&amp;#10;                    myWindow.flip();&amp;#10;                    GiveScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                    responseGiveScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: GiveScaleChoice})[0];&amp;#10;                } else {&amp;#10;                    if ((response === &quot;right&quot;)) {&amp;#10;                        console.log(&quot;keep pieces&quot;);&amp;#10;                        scalePuzzleKeep = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, (- 0.5)], &quot;text&quot;: &quot;1              2                3&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                        scalePuzzleKeepText = new visual.TextStim(myWindow, {&quot;pos&quot;: [0, 0.5], &quot;text&quot;: &quot;How many pieces do you want to keep?&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                        myBackground.draw();&amp;#10;                        scalePuzzleKeepText.draw();&amp;#10;                        scalePuzzleKeep.draw();&amp;#10;                        optionTwo.draw();&amp;#10;                        myWindow.flip();&amp;#10;                        KeepScaleChoice = [&quot;left&quot;, &quot;up&quot;, &quot;right&quot;];&amp;#10;                        responseKeepScale = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: KeepScaleChoice})[0];&amp;#10;                    } else {&amp;#10;                        console.log(&quot;whoops! does not work&quot;);&amp;#10;                    }&amp;#10;                }&amp;#10;                myBackground.draw();&amp;#10;                myWindow.flip();&amp;#10;                core.wait(1);&amp;#10;                charText = new visual.TextStim(myWindow, {&quot;text&quot;: ((&quot;Did &quot; + participantNameTwo) + &quot; get to play or have to watch?&quot;), &quot;pos&quot;: [0, 0.7], &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                optionOne = new visual.ImageStim(myWindow, {&quot;pos&quot;: [0, 0], &quot;size&quot;: [0.23, 0.45], &quot;image&quot;: (finStimDir + ParticipantTwo)});&amp;#10;                chooseOne = new visual.TextStim(myWindow, {&quot;pos&quot;: [(- 0.5), (- 0.5)], &quot;text&quot;: &quot;Play&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                chooseTwo = new visual.TextStim(myWindow, {&quot;pos&quot;: [0.5, (- 0.5)], &quot;text&quot;: &quot;Watch&quot;, &quot;wrapWidth&quot;: 1.5, &quot;color&quot;: &quot;black&quot;});&amp;#10;                myBackground.draw();&amp;#10;                charText.draw();&amp;#10;                optionOne.draw();&amp;#10;                chooseOne.draw();&amp;#10;                chooseTwo.draw();&amp;#10;                myWindow.flip();&amp;#10;                choiceResp = [&quot;left&quot;, &quot;right&quot;];&amp;#10;                response = psychoJS.eventManager.waitKeys({&quot;keyList&quot;: choiceResp})[0];&amp;#10;                if ((response === &quot;left&quot;)) {&amp;#10;                    console.log(&quot;play&quot;);&amp;#10;                } else {&amp;#10;                    console.log(&quot;watch&quot;);&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;if questionType==1:&amp;#10;    #MC&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Did &quot; + participantNameTwo + &quot; get to play or have to watch?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, 0), size = (.23,.45), image= finStimDir + ParticipantTwo)&amp;#10;    chooseOne= visual.TextStim(myWindow, pos=(-.5, -.5), text= &quot;Play&quot;, wrapWidth=1.5, color='black')&amp;#10;    chooseTwo= visual.TextStim(myWindow, pos=(.5, -.5), text= &quot;Watch&quot;, wrapWidth=1.5, color='black')&amp;#10;    myBackground.draw()&amp;#10;    charText.draw()&amp;#10;    optionOne.draw()&amp;#10;    chooseOne.draw()&amp;#10;    chooseTwo.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;    else:&amp;#10;        print(&quot;watch&quot;)&amp;#10;&amp;#10;#Nice&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Is &quot;+ playerOneNameTwo +&quot; nice or not nice?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), size= (.5,.5), image= finStimDir + 'NiceNotNice.png' )&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3), size = (.23,.45),image= finStimDir + PlayerOneTwo)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;nice&quot;)&amp;#10;        scaleNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NiceScale.png')&amp;#10;        scaleNiceText= visual.TextStim(myWindow, pos = (0,.7), text = &quot;Is &quot;+ playerOneNameTwo +&quot; a little nice, nice, or really nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNiceText.draw()&amp;#10;        scaleNice.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        niceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = niceScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;not nice&quot;)&amp;#10;        scaleNotNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NotNiceScale.png')&amp;#10;        scaleNotNiceText= visual.TextStim(myWindow, pos = (0,.7), text = &quot;Is &quot;+ playerOneNameTwo+&quot; a little not nice, not nice, or really not nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNotNiceText.draw()&amp;#10;        scaleNotNice.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        notniceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = notniceScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;#Play&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot; + playerOneNameTwo + &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (-.5, -.5), size= (.5,.5),image= finStimDir + 'Play.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,0), size=(.23,.45), image= finStimDir + PlayerOneTwo)&amp;#10;    optionThree = visual.ImageStim(myWindow, pos= (.5, -.5), size=(.5,.5), image= finStimDir + 'NoPlay.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    optionThree.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalePlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+playerOneNameTwo+&quot; let you play?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePlayText.draw()&amp;#10;        scalePlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        PlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = PlayScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalenoPlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalenoPlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+ playerOneNameTwo+&quot; not play with you?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalenoPlayText.draw()&amp;#10;        scalenoPlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        noPlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = noPlayScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;    #Help&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot;+playerOneNameTwo+&quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces to them or keep them?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), size =(.5,.5), image= finStimDir + 'PuzzlePieces.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3), size=(.23,.45),image= finStimDir + PlayerOnePuzzleTwo)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;give pieces&quot;)&amp;#10;        scalePuzzleGive = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleGiveText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to give &quot;+ playerOneNameTwo+&quot; ?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleGiveText.draw()&amp;#10;        scalePuzzleGive.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        GiveScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = GiveScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;keep pieces&quot;)&amp;#10;        scalePuzzleKeep = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleKeepText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to keep?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleKeepText.draw()&amp;#10;        scalePuzzleKeep.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        KeepScaleChoice = ['left', 'up', 'right']&amp;#10;        responseKeepScale= event.waitKeys(keyList = KeepScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;    #cooperate&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;We are going to play another game. This game need two people. Do you want to work with &quot;+ playerOneNameTwo+ &quot; or someone else?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (.5, 0), size= (.23,.45), image= finStimDir + PlayerOneTwo)&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (-.5,0), image= finStimDir + 'work_together.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;&amp;#10;    if response == 'left':&amp;#10;        print(&quot;together&quot;)&amp;#10;&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;someone else&quot;)&amp;#10;&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;&amp;#10;elif questionType==2:&amp;#10;    #MC&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Did &quot; + participantNameTwo + &quot; get to play or have to watch?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, 0), size = (.23,.45), image= finStimDir + ParticipantTwo)&amp;#10;    chooseOne= visual.TextStim(myWindow, pos=(-.5, -.5), text= &quot;Play&quot;, wrapWidth=1.5, color='black')&amp;#10;    chooseTwo= visual.TextStim(myWindow, pos=(.5, -.5), text= &quot;Watch&quot;, wrapWidth=1.5, color='black')&amp;#10;    myBackground.draw()&amp;#10;    charText.draw()&amp;#10;    optionOne.draw()&amp;#10;    chooseOne.draw()&amp;#10;    chooseTwo.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;    else:&amp;#10;        print(&quot;watch&quot;)&amp;#10;    #Play&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot; + playerOneNameTwo + &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (.5, -.5), image= finStimDir + 'Play.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,0), size = (.23,.45), image= finStimDir + PlayerOneTwo)&amp;#10;    optionThree = visual.ImageStim(myWindow, pos= (-.5, -.5), image= finStimDir + 'NoPlay.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    optionThree.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalePlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+playerOneNameTwo+&quot; let you play?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePlayText.draw()&amp;#10;        scalePlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        PlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = PlayScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalenoPlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalenoPlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+ playerOneNameTwo+&quot; not play with you?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalenoPlayText.draw()&amp;#10;        scalenoPlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        noPlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = noPlayScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;&amp;#10;    #Nice&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Is &quot;+ playerOneNameTwo +&quot; nice or not nice?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), image= finStimDir + 'NiceNotNice.png' )&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3), size = (.23,.45),image= finStimDir + PlayerOneTwo)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;nice&quot;)&amp;#10;        scaleNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NiceScale.png')&amp;#10;        scaleNiceText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;Is &quot;+ playerOneNameTwo +&quot; a little nice, nice, or really nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNiceText.draw()&amp;#10;        scaleNice.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        niceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = niceScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;not nice&quot;)&amp;#10;        scaleNotNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NotNiceScale.png')&amp;#10;        scaleNotNiceText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;Is &quot;+ playerOneNameTwo+&quot; a little not nice, not nice, or really not nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNotNiceText.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        notniceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = notniceScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;    #Cooperate&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;We are going to play another game. This game need two people. Do you want to work with &quot;+ playerOneNameTwo+ &quot; or someone else?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;&amp;#10;&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (.5, 0),size= (.23,.45), image= finStimDir + PlayerOneTwo)&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (-.5,0), image= finStimDir + 'work_together.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;&amp;#10;    if response == 'left':&amp;#10;        print(&quot;together&quot;)&amp;#10;&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;someone else&quot;)&amp;#10;&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;&amp;#10;    #Help&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot;+playerOneNameTwo+&quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces to them  or keep them?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), image= finStimDir + 'PuzzlePieces.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3), size= (.23,.45), image= finStimDir + PlayerOnePuzzleTwo)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;give pieces&quot;)&amp;#10;        scalePuzzleGive = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleGiveText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to give &quot;+ playerOneNameTwo+&quot; ?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleGiveText.draw()&amp;#10;        scalePuzzleGive.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        GiveScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = GiveScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;keep pieces&quot;)&amp;#10;        scalePuzzleKeep = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleKeepText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to keep?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleKeepText.draw()&amp;#10;        scalePuzzleKeep.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        KeepScaleChoice = ['left', 'up', 'right']&amp;#10;        responseKeepScale= event.waitKeys(keyList = KeepScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;elif questionType==3:&amp;#10;    #Nice&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Is &quot;+ playerOneNameTwo +&quot; nice or not nice?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), image= finStimDir + 'NiceNotNice.png' )&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3), size = (.23,.45),image= finStimDir + PlayerOneTwo)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;nice&quot;)&amp;#10;        scaleNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NiceScale.png')&amp;#10;        scaleNiceText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;Is &quot;+ playerOneNameTwo +&quot; a little nice, nice, or really nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNiceText.draw()&amp;#10;        scaleNice.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        niceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = niceScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;not nice&quot;)&amp;#10;        scaleNotNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NotNiceScale.png')&amp;#10;        scaleNotNiceText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;Is &quot;+ playerOneNameTwo+&quot; a little not nice, not nice, or really not nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNotNiceText.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        notniceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = notniceScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;    #play&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot; + playerOneNameTwo + &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (.5, -.5), image= finStimDir + 'Play.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,0), size= (.23,.45),image= finStimDir + PlayerOneTwo)&amp;#10;    optionThree = visual.ImageStim(myWindow, pos= (-.5, -.5), image= finStimDir + 'NoPlay.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    optionThree.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalePlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+playerOneNameTwo+&quot; let you play?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePlayText.draw()&amp;#10;        scalePlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        PlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = PlayScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalenoPlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalenoPlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+ playerOneNameTwo+&quot; not play with you?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalenoPlayText.draw()&amp;#10;        scalenoPlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        noPlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = noPlayScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;&amp;#10;    #help &amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot;+playerOneNameTwo+&quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces them or keep them?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), image= finStimDir + 'PuzzlePieces.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3),size= (.23,.45), image= finStimDir + PlayerOnePuzzleTwo)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;give pieces&quot;)&amp;#10;        scalePuzzleGive = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleGiveText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to give &quot;+ playerOneNameTwo+&quot; ?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleGiveText.draw()&amp;#10;        scalePuzzleGive.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        GiveScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = GiveScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;keep pieces&quot;)&amp;#10;        scalePuzzleKeep = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleKeepText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to keep?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleKeepText.draw()&amp;#10;        scalePuzzleKeep.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        KeepScaleChoice = ['left', 'up', 'right']&amp;#10;        responseKeepScale= event.waitKeys(keyList = KeepScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;    #cooperate &amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;We are going to play another game. This game need two people. Do you want to work with &quot;+ playerOneNameTwo+ &quot; or someone else?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;&amp;#10;&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (.5, 0), image= finStimDir + PlayerOneTwo)&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (-.5,0), image= finStimDir + 'work_together.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;&amp;#10;    if response == 'left':&amp;#10;        print(&quot;together&quot;)&amp;#10;&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;someone else&quot;)&amp;#10;&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;&amp;#10;    #MC&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Did &quot; + participantNameTwo+ &quot; get to play or have to watch?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, 0), size = (.23,.45), image= finStimDir + ParticipantTwo)&amp;#10;    chooseOne= visual.TextStim(myWindow, pos=(-.5, -.5), text= &quot;Play&quot;, wrapWidth=1.5, color='black')&amp;#10;    chooseTwo= visual.TextStim(myWindow, pos=(.5, -.5), text= &quot;Watch&quot;, wrapWidth=1.5, color='black')&amp;#10;    myBackground.draw()&amp;#10;    charText.draw()&amp;#10;    optionOne.draw()&amp;#10;    chooseOne.draw()&amp;#10;    chooseTwo.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;    else:&amp;#10;        print(&quot;watch&quot;)&amp;#10;elif questionType==4:&amp;#10;    #play &amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot; + playerOneNameTwo+ &quot; is going to play another game. Do you think they will let you play or not let you play?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (.5, -.5), image= finStimDir + 'Play.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,0),size= (.23,.45), image= finStimDir + PlayerOneTwo)&amp;#10;    optionThree = visual.ImageStim(myWindow, pos= (-.5, -.5), image= finStimDir + 'NoPlay.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    optionThree.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalePlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+playerOneNameTwo+&quot; let you play?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePlayText.draw()&amp;#10;        scalePlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        PlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = PlayScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;play&quot;)&amp;#10;        scalenoPlay = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;a little bit              regular amount                a lot&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalenoPlayText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How much will &quot;+ playerOneNameTwo+&quot; not play with you?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalenoPlayText.draw()&amp;#10;        scalenoPlay.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        noPlayScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = noPlayScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;&amp;#10;    #nice &amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Is &quot;+ playerOneNameTwo +&quot; nice or not nice?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), image= finStimDir + 'NiceNotNice.png' )&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3), size = (.23,.45),image= finStimDir + PlayerOneTwo)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;nice&quot;)&amp;#10;        scaleNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NiceScale.png')&amp;#10;        scaleNiceText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;Is &quot;+ playerOneNameTwo +&quot; a little nice, nice, or really nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNiceText.draw()&amp;#10;        scaleNice.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        niceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = niceScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;not nice&quot;)&amp;#10;        scaleNotNice = visual.ImageStim(myWindow, pos=(0,-.5), image = finStimDir + 'NotNiceScale.png')&amp;#10;        scaleNotNiceText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;Is &quot;+ playerOneNameTwo+&quot; a little not nice, not nice, or really not nice?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scaleNotNiceText.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        notniceScaleChoice = ['left', 'up', 'right']&amp;#10;        responseNiceScale= event.waitKeys(keyList = notniceScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;    #cooperate &amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;We are going to play another game. This game need two people. Do you want to work with &quot;+ playerOneNameTwo+ &quot; or someone else?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;&amp;#10;&amp;#10;    optionOne = visual.ImageStim(myWindow,size= (.23,.45), pos= (.5, 0), image= finStimDir + PlayerOneTwo)&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (-.5,0), image= finStimDir + 'work_together.png')&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;&amp;#10;    if response == 'left':&amp;#10;        print(&quot;together&quot;)&amp;#10;&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;someone else&quot;)&amp;#10;&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;&amp;#10;    #help &amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Oh look! &quot;+playerOneNameTwo+&quot; is working to complete a puzzle. It looks like they are missing some pieces. Here are some pieces. Do you want to send any of the pieces to them or keep them?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, -.5), image= finStimDir + 'PuzzlePieces.png')&amp;#10;    optionTwo = visual.ImageStim(myWindow, pos= (0,.3), size= (.23,.45), image= finStimDir + PlayerOnePuzzleTwo)&amp;#10;    myBackground.draw()&amp;#10;    optionOne.draw()&amp;#10;    optionTwo.draw()&amp;#10;    charText.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;give pieces&quot;)&amp;#10;        scalePuzzleGive = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleGiveText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to give &quot;+ playerOneNameTwo+&quot; ?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleGiveText.draw()&amp;#10;        scalePuzzleGive.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        GiveScaleChoice = ['left', 'up', 'right']&amp;#10;        responseGiveScale= event.waitKeys(keyList = GiveScaleChoice)[0]&amp;#10;    elif response == 'right':&amp;#10;        print(&quot;keep pieces&quot;)&amp;#10;        scalePuzzleKeep = visual.TextStim(myWindow, pos=(0,-.5), text = &quot;1              2                3&quot;, wrapWidth=1.5, color='black')&amp;#10;        scalePuzzleKeepText= visual.TextStim(myWindow, pos = (0,.5), text = &quot;How many pieces do you want to keep?&quot;, wrapWidth=1.5, color='black')&amp;#10;        myBackground.draw()&amp;#10;        scalePuzzleKeepText.draw()&amp;#10;        scalePuzzleKeep.draw()&amp;#10;        optionTwo.draw()&amp;#10;        myWindow.flip()&amp;#10;        KeepScaleChoice = ['left', 'up', 'right']&amp;#10;        responseKeepScale= event.waitKeys(keyList = KeepScaleChoice)[0]&amp;#10;    else:&amp;#10;        print('whoops! does not work')&amp;#10;    myBackground.draw()&amp;#10;    myWindow.flip()&amp;#10;    core.wait(1)&amp;#10;    #MC &amp;#10;    charText = visual.TextStim(myWindow, text= &quot;Did &quot; + participantNameTwo + &quot; get to play or have to watch?&quot;, pos=(0,.7), wrapWidth=1.5, color='black')&amp;#10;    optionOne = visual.ImageStim(myWindow, pos= (0, 0), size = (.23,.45), image= finStimDir + ParticipantTwo)&amp;#10;    chooseOne= visual.TextStim(myWindow, pos=(-.5, -.5), text= &quot;Play&quot;, wrapWidth=1.5, color='black')&amp;#10;    chooseTwo= visual.TextStim(myWindow, pos=(.5, -.5), text= &quot;Watch&quot;, wrapWidth=1.5, color='black')&amp;#10;    myBackground.draw()&amp;#10;    charText.draw()&amp;#10;    optionOne.draw()&amp;#10;    chooseOne.draw()&amp;#10;    chooseTwo.draw()&amp;#10;    myWindow.flip()&amp;#10;    choiceResp= ['left', 'right']&amp;#10;    response = event.waitKeys(keyList = choiceResp)[0]&amp;#10;    if response == 'left':&amp;#10;        print(&quot;play&quot;)&amp;#10;    else:&amp;#10;        print(&quot;watch&quot;)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_6" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="trial"/>
    <Routine name="introductions"/>
    <Routine name="Game"/>
    <Routine name="questions"/>
    <Routine name="introductions_game2"/>
    <Routine name="GameTwo"/>
    <Routine name="questions2"/>
  </Flow>
</PsychoPy2experiment>
